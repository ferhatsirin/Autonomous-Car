
MappingCarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007088  08007088  00017088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000070  08007168  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08007168  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013416  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b93  00000000  00000000  000334b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb0  00000000  00000000  00037148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001804d  00000000  00000000  000380f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e69a  00000000  00000000  00050145  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009055e  00000000  00000000  0005e7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eed3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000eedb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800706c 	.word	0x0800706c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800706c 	.word	0x0800706c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <initBluetooth>:
#include "BluetoothCom.h"

static UART_HandleTypeDef* blUart;

void initBluetooth(UART_HandleTypeDef* huart,uint8_t* data, uint8_t length){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
	blUart =huart;
 8000dd2:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <initBluetooth+0x2c>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(blUart, data, length);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <initBluetooth+0x2c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	79fa      	ldrb	r2, [r7, #7]
 8000dde:	b292      	uxth	r2, r2
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 fe9c 	bl	8005b20 <HAL_UART_Receive_DMA>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000008c 	.word	0x2000008c

08000df4 <sendDataDMA>:


void sendDataDMA(uint8_t * data,int length){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(blUart,data, length);
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <sendDataDMA+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	b292      	uxth	r2, r2
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 fe1d 	bl	8005a48 <HAL_UART_Transmit_DMA>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000008c 	.word	0x2000008c

08000e1c <sendData>:

void sendData(uint8_t *data, int length){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(blUart, data, length, 100);
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <sendData+0x24>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	2364      	movs	r3, #100	; 0x64
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	f004 fd70 	bl	8005916 <HAL_UART_Transmit>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000008c 	.word	0x2000008c

08000e44 <initDelayMS>:
#include "DelayMS.h"

TIM_HandleTypeDef* usTimer;

void initDelayMS(TIM_HandleTypeDef* tim){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	usTimer =tim;
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <initDelayMS+0x20>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(usTimer);
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <initDelayMS+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 f919 	bl	800508e <HAL_TIM_Base_Start>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000138 	.word	0x20000138

08000e68 <delay_us>:

// delay in microsecond
void delay_us(uint16_t delay){
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(usTimer,0);
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <delay_us+0x30>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(usTimer) < delay);
 8000e7c:	bf00      	nop
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <delay_us+0x30>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3f8      	bcc.n	8000e7e <delay_us+0x16>

}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000138 	.word	0x20000138

08000e9c <initFlameSensor>:
static uint16_t fpin;
static uint8_t data[2];
static uint8_t lastData;

// initialize flame sensor with pins
void initFlameSensor(GPIO_TypeDef* pinT,uint16_t pinN){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]

	fpinType =pinT;
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <initFlameSensor+0x2c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
	fpin =pinN;
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <initFlameSensor+0x30>)
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	8013      	strh	r3, [r2, #0]
	lastData =0;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <initFlameSensor+0x34>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000090 	.word	0x20000090
 8000ecc:	20000094 	.word	0x20000094
 8000ed0:	2000009a 	.word	0x2000009a

08000ed4 <readFlameSensor>:

//read the flame sensor and sends its data
void readFlameSensor(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

	data[0] =50;  //communication code
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <readFlameSensor+0x60>)
 8000eda:	2232      	movs	r2, #50	; 0x32
 8000edc:	701a      	strb	r2, [r3, #0]

	if (HAL_GPIO_ReadPin(fpinType, fpin) == GPIO_PIN_SET){
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <readFlameSensor+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <readFlameSensor+0x68>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4610      	mov	r0, r2
 8000eea:	f002 fc71 	bl	80037d0 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d10e      	bne.n	8000f12 <readFlameSensor+0x3e>
		if(lastData == 0){
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <readFlameSensor+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d118      	bne.n	8000f2e <readFlameSensor+0x5a>
			data[1] = 1;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <readFlameSensor+0x60>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	705a      	strb	r2, [r3, #1]
			sendData(data,2);
 8000f02:	2102      	movs	r1, #2
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <readFlameSensor+0x60>)
 8000f06:	f7ff ff89 	bl	8000e1c <sendData>
			lastData =1;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <readFlameSensor+0x6c>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
			sendData(data,2);
			lastData =0;
		}
	}

}
 8000f10:	e00d      	b.n	8000f2e <readFlameSensor+0x5a>
		if(lastData == 1){
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <readFlameSensor+0x6c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d109      	bne.n	8000f2e <readFlameSensor+0x5a>
			data[1] = 0;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <readFlameSensor+0x60>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	705a      	strb	r2, [r3, #1]
			sendData(data,2);
 8000f20:	2102      	movs	r1, #2
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <readFlameSensor+0x60>)
 8000f24:	f7ff ff7a 	bl	8000e1c <sendData>
			lastData =0;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <readFlameSensor+0x6c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000098 	.word	0x20000098
 8000f38:	20000090 	.word	0x20000090
 8000f3c:	20000094 	.word	0x20000094
 8000f40:	2000009a 	.word	0x2000009a

08000f44 <initMagnetometer>:
static uint16_t degree_i,lastDegree;
static uint8_t count;


// initialize magnetometer sensor to be used with provided pins
void initMagnetometer(I2C_HandleTypeDef* i2c){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	hi2c =i2c;
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <initMagnetometer+0x28>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]

	count =0;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <initMagnetometer+0x2c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	lastDegree =0;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <initMagnetometer+0x30>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	801a      	strh	r2, [r3, #0]

	softResetMagnetometer();
 8000f5e:	f000 f853 	bl	8001008 <softResetMagnetometer>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000009c 	.word	0x2000009c
 8000f70:	200000bc 	.word	0x200000bc
 8000f74:	200000ba 	.word	0x200000ba

08000f78 <initializeRegisters>:

void initializeRegisters(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af02      	add	r7, sp, #8

	data[0] =9;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <initializeRegisters+0x88>)
 8000f80:	2209      	movs	r2, #9
 8000f82:	701a      	strb	r2, [r3, #0]
	data[1] =0x1d;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <initializeRegisters+0x88>)
 8000f86:	221d      	movs	r2, #29
 8000f88:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c,deviceAddress,data, 2, 100); // set mode
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <initializeRegisters+0x8c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	231a      	movs	r3, #26
 8000f90:	b299      	uxth	r1, r3
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2302      	movs	r3, #2
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <initializeRegisters+0x88>)
 8000f9a:	f002 fd9b 	bl	8003ad4 <HAL_I2C_Master_Transmit>

	data[0] =10;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <initializeRegisters+0x88>)
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x41;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <initializeRegisters+0x88>)
 8000fa6:	2241      	movs	r2, #65	; 0x41
 8000fa8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c,deviceAddress,data, 2, 100); // set enable
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <initializeRegisters+0x8c>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	231a      	movs	r3, #26
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <initializeRegisters+0x88>)
 8000fba:	f002 fd8b 	bl	8003ad4 <HAL_I2C_Master_Transmit>

	data[0] =11;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <initializeRegisters+0x88>)
 8000fc0:	220b      	movs	r2, #11
 8000fc2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x01;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <initializeRegisters+0x88>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c,deviceAddress, data , 2, 100); // set reset
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <initializeRegisters+0x8c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	231a      	movs	r3, #26
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	4a09      	ldr	r2, [pc, #36]	; (8001000 <initializeRegisters+0x88>)
 8000fda:	f002 fd7b 	bl	8003ad4 <HAL_I2C_Master_Transmit>

	data[0] =0;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <initializeRegisters+0x88>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(hi2c, deviceAddress,data, 1, 100);   // set address
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <initializeRegisters+0x8c>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	231a      	movs	r3, #26
 8000fea:	b299      	uxth	r1, r3
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4a03      	ldr	r2, [pc, #12]	; (8001000 <initializeRegisters+0x88>)
 8000ff4:	f002 fd6e 	bl	8003ad4 <HAL_I2C_Master_Transmit>

}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000a8 	.word	0x200000a8
 8001004:	2000009c 	.word	0x2000009c

08001008 <softResetMagnetometer>:
	initializeRegisters();
}
*/


void softResetMagnetometer(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8
	data[0] =10;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <softResetMagnetometer+0x3c>)
 8001010:	220a      	movs	r2, #10
 8001012:	701a      	strb	r2, [r3, #0]
	data[1] = 0xC1;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <softResetMagnetometer+0x3c>)
 8001016:	22c1      	movs	r2, #193	; 0xc1
 8001018:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c,deviceAddress,data, 2, 100); // set enable
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <softResetMagnetometer+0x40>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	231a      	movs	r3, #26
 8001020:	b299      	uxth	r1, r3
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <softResetMagnetometer+0x3c>)
 800102a:	f002 fd53 	bl	8003ad4 <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 800102e:	2005      	movs	r0, #5
 8001030:	f001 fd88 	bl	8002b44 <HAL_Delay>

	initializeRegisters();
 8001034:	f7ff ffa0 	bl	8000f78 <initializeRegisters>
	HAL_Delay(10);
 8001038:	200a      	movs	r0, #10
 800103a:	f001 fd83 	bl	8002b44 <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000a8 	.word	0x200000a8
 8001048:	2000009c 	.word	0x2000009c
 800104c:	00000000 	.word	0x00000000

08001050 <getDegree>:

// get degree from magnetometer data
uint16_t getDegree(){
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	af00      	add	r7, sp, #0

	degree=atan2(compass_y,compass_x);
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <getDegree+0x118>)
 8001056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa0e 	bl	800047c <__aeabi_i2d>
 8001060:	4604      	mov	r4, r0
 8001062:	460d      	mov	r5, r1
 8001064:	4b41      	ldr	r3, [pc, #260]	; (800116c <getDegree+0x11c>)
 8001066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa06 	bl	800047c <__aeabi_i2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	ec43 2b11 	vmov	d1, r2, r3
 8001078:	ec45 4b10 	vmov	d0, r4, r5
 800107c:	f005 fd6a 	bl	8006b54 <atan2>
 8001080:	eeb0 7a40 	vmov.f32	s14, s0
 8001084:	eef0 7a60 	vmov.f32	s15, s1
 8001088:	4b39      	ldr	r3, [pc, #228]	; (8001170 <getDegree+0x120>)
 800108a:	ed83 7b00 	vstr	d7, [r3]

	degree +=0.10006553796;  //magnetic declination
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <getDegree+0x120>)
 8001090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001094:	a32e      	add	r3, pc, #184	; (adr r3, 8001150 <getDegree+0x100>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff f8a3 	bl	80001e4 <__adddf3>
 800109e:	4603      	mov	r3, r0
 80010a0:	460c      	mov	r4, r1
 80010a2:	4a33      	ldr	r2, [pc, #204]	; (8001170 <getDegree+0x120>)
 80010a4:	e9c2 3400 	strd	r3, r4, [r2]

	if(degree < 0){
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <getDegree+0x120>)
 80010aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	f7ff fcbd 	bl	8000a34 <__aeabi_dcmplt>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00f      	beq.n	80010e0 <getDegree+0x90>
		degree +=radyan;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <getDegree+0x120>)
 80010c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c6:	a424      	add	r4, pc, #144	; (adr r4, 8001158 <getDegree+0x108>)
 80010c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4623      	mov	r3, r4
 80010d0:	f7ff f888 	bl	80001e4 <__adddf3>
 80010d4:	4603      	mov	r3, r0
 80010d6:	460c      	mov	r4, r1
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <getDegree+0x120>)
 80010da:	e9c2 3400 	strd	r3, r4, [r2]
 80010de:	e01b      	b.n	8001118 <getDegree+0xc8>
	}else if(degree > radyan){
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <getDegree+0x120>)
 80010e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e6:	a41c      	add	r4, pc, #112	; (adr r4, 8001158 <getDegree+0x108>)
 80010e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	f7ff fcbe 	bl	8000a70 <__aeabi_dcmpgt>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00e      	beq.n	8001118 <getDegree+0xc8>
		degree -=radyan;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <getDegree+0x120>)
 80010fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001100:	a415      	add	r4, pc, #84	; (adr r4, 8001158 <getDegree+0x108>)
 8001102:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001106:	461a      	mov	r2, r3
 8001108:	4623      	mov	r3, r4
 800110a:	f7ff f869 	bl	80001e0 <__aeabi_dsub>
 800110e:	4603      	mov	r3, r0
 8001110:	460c      	mov	r4, r1
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <getDegree+0x120>)
 8001114:	e9c2 3400 	strd	r3, r4, [r2]
	}

	degree = degree * toDegree;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <getDegree+0x120>)
 800111a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800111e:	a410      	add	r4, pc, #64	; (adr r4, 8001160 <getDegree+0x110>)
 8001120:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001124:	461a      	mov	r2, r3
 8001126:	4623      	mov	r3, r4
 8001128:	f7ff fa12 	bl	8000550 <__aeabi_dmul>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <getDegree+0x120>)
 8001132:	e9c2 3400 	strd	r3, r4, [r2]

	return (uint16_t)degree;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <getDegree+0x120>)
 8001138:	e9d3 3400 	ldrd	r3, r4, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	4621      	mov	r1, r4
 8001140:	f7ff fca0 	bl	8000a84 <__aeabi_d2uiz>
 8001144:	4603      	mov	r3, r0
 8001146:	b29b      	uxth	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	f3af 8000 	nop.w
 8001150:	24feae44 	.word	0x24feae44
 8001154:	3fb99de5 	.word	0x3fb99de5
 8001158:	54442d18 	.word	0x54442d18
 800115c:	401921fb 	.word	0x401921fb
 8001160:	1a63c1f8 	.word	0x1a63c1f8
 8001164:	404ca5dc 	.word	0x404ca5dc
 8001168:	200000ae 	.word	0x200000ae
 800116c:	200000ac 	.word	0x200000ac
 8001170:	200000b0 	.word	0x200000b0

08001174 <readMagnetometerReg>:

// read magnetometer register and save it to the compass variables
void readMagnetometerReg(){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Receive(hi2c, deviceAddress, i2cData, 7,100);
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <readMagnetometerReg+0x4c>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	231a      	movs	r3, #26
 8001180:	b299      	uxth	r1, r3
 8001182:	2364      	movs	r3, #100	; 0x64
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2307      	movs	r3, #7
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <readMagnetometerReg+0x50>)
 800118a:	f002 fda1 	bl	8003cd0 <HAL_I2C_Master_Receive>

	compass_x =(((int16_t)i2cData[1]) << 8) | i2cData[0];
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <readMagnetometerReg+0x50>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <readMagnetometerReg+0x50>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <readMagnetometerReg+0x54>)
 80011a2:	801a      	strh	r2, [r3, #0]
	compass_y =(((int16_t)i2cData[3]) << 8) | i2cData[2];
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <readMagnetometerReg+0x50>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <readMagnetometerReg+0x50>)
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <readMagnetometerReg+0x58>)
 80011b8:	801a      	strh	r2, [r3, #0]

}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000009c 	.word	0x2000009c
 80011c4:	200000a0 	.word	0x200000a0
 80011c8:	200000ac 	.word	0x200000ac
 80011cc:	200000ae 	.word	0x200000ae

080011d0 <readCompass>:


// read compass degree and send data
uint16_t readCompass(uint8_t motorDriver){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]


	if(motorDriver == 0 &&  count > 500 ){
		softResetMagnetometer();
		count =0;
	}else if(motorDriver == 1){
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <readCompass+0x16>
		softResetMagnetometer();
 80011e0:	f7ff ff12 	bl	8001008 <softResetMagnetometer>
 80011e4:	e005      	b.n	80011f2 <readCompass+0x22>
	}else{
		++count;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <readCompass+0x84>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <readCompass+0x84>)
 80011f0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
	}

	++count;
*/
	readMagnetometerReg();
 80011f2:	f7ff ffbf 	bl	8001174 <readMagnetometerReg>

	degree_i =getDegree();
 80011f6:	f7ff ff2b 	bl	8001050 <getDegree>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <readCompass+0x88>)
 8001200:	801a      	strh	r2, [r3, #0]

	if(abs(degree_i-lastDegree) > 4 ){
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <readCompass+0x88>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <readCompass+0x8c>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	bfb8      	it	lt
 8001212:	425b      	neglt	r3, r3
 8001214:	2b04      	cmp	r3, #4
 8001216:	dd16      	ble.n	8001246 <readCompass+0x76>

		data[0]=40; // communication code
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <readCompass+0x90>)
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	701a      	strb	r2, [r3, #0]
		data[1] =(degree_i >> 8) & 0xFF; // first 8 byte
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <readCompass+0x88>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <readCompass+0x90>)
 800122a:	705a      	strb	r2, [r3, #1]
		data[2] =degree_i  & 0xFF;  // last 8 byte
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <readCompass+0x88>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <readCompass+0x90>)
 8001234:	709a      	strb	r2, [r3, #2]

		sendData(data,3);
 8001236:	2103      	movs	r1, #3
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <readCompass+0x90>)
 800123a:	f7ff fdef 	bl	8000e1c <sendData>

		lastDegree =degree_i;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <readCompass+0x88>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <readCompass+0x8c>)
 8001244:	801a      	strh	r2, [r3, #0]
	}


	return degree_i;
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <readCompass+0x88>)
 8001248:	881b      	ldrh	r3, [r3, #0]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000bc 	.word	0x200000bc
 8001258:	200000b8 	.word	0x200000b8
 800125c:	200000ba 	.word	0x200000ba
 8001260:	200000a8 	.word	0x200000a8

08001264 <initMotorDriver>:
static uint16_t right2;
static TIM_HandleTypeDef* mTimer;
static short value;
static uint8_t data;

void initMotorDriver(GPIO_TypeDef* pinT,uint16_t l1,uint16_t l2,uint16_t r1,uint16_t r2,TIM_HandleTypeDef* tim){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4603      	mov	r3, r0
 8001274:	817b      	strh	r3, [r7, #10]
 8001276:	460b      	mov	r3, r1
 8001278:	813b      	strh	r3, [r7, #8]
 800127a:	4613      	mov	r3, r2
 800127c:	80fb      	strh	r3, [r7, #6]
	pinType =pinT;
 800127e:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <initMotorDriver+0x4c>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6013      	str	r3, [r2, #0]

	left1 =l1;
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <initMotorDriver+0x50>)
 8001286:	897b      	ldrh	r3, [r7, #10]
 8001288:	8013      	strh	r3, [r2, #0]
	left2 =l2;
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <initMotorDriver+0x54>)
 800128c:	893b      	ldrh	r3, [r7, #8]
 800128e:	8013      	strh	r3, [r2, #0]
	right1 =r1;
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <initMotorDriver+0x58>)
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	8013      	strh	r3, [r2, #0]
	right2 =r2;
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <initMotorDriver+0x5c>)
 8001298:	8b3b      	ldrh	r3, [r7, #24]
 800129a:	8013      	strh	r3, [r2, #0]

	mTimer =tim;
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <initMotorDriver+0x60>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	6013      	str	r3, [r2, #0]

	resetMotorPins();
 80012a2:	f000 f8b9 	bl	8001418 <resetMotorPins>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000c0 	.word	0x200000c0
 80012b4:	200000c4 	.word	0x200000c4
 80012b8:	200000c6 	.word	0x200000c6
 80012bc:	200000c8 	.word	0x200000c8
 80012c0:	200000ca 	.word	0x200000ca
 80012c4:	200000cc 	.word	0x200000cc

080012c8 <goForward>:


void goForward(uint16_t unit){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]

	value =unit;
 80012d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <goForward+0x3c>)
 80012d8:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(mTimer);
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <goForward+0x40>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fef9 	bl	80050d6 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(pinType, left1 | right1, GPIO_PIN_SET);
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <goForward+0x44>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <goForward+0x48>)
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <goForward+0x4c>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	f002 fa82 	bl	8003800 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000d0 	.word	0x200000d0
 8001308:	200000cc 	.word	0x200000cc
 800130c:	200000c0 	.word	0x200000c0
 8001310:	200000c4 	.word	0x200000c4
 8001314:	200000c8 	.word	0x200000c8

08001318 <setMotorValue>:

void setMotorValue(short val){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	value =val;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <setMotorValue+0x1c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	8013      	strh	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	200000d0 	.word	0x200000d0

08001338 <getMotorValue>:

short getMotorValue(){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

	return value;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <getMotorValue+0x14>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	200000d0 	.word	0x200000d0

08001350 <turnCar>:


void turnCar(uint16_t degree){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]

	uint16_t pinL, pinR;
	uint16_t counter, currentD;

	currentD =readCompass(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff ff38 	bl	80011d0 <readCompass>
 8001360:	4603      	mov	r3, r0
 8001362:	813b      	strh	r3, [r7, #8]

	if(((degree - currentD + 360) % 360) <= 180){  // clockwise
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	893b      	ldrh	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <turnCar+0xb0>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	441a      	add	r2, r3
 8001376:	1211      	asrs	r1, r2, #8
 8001378:	17da      	asrs	r2, r3, #31
 800137a:	1a8a      	subs	r2, r1, r2
 800137c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001380:	fb01 f202 	mul.w	r2, r1, r2
 8001384:	1a9a      	subs	r2, r3, r2
 8001386:	2ab4      	cmp	r2, #180	; 0xb4
 8001388:	dc06      	bgt.n	8001398 <turnCar+0x48>
		pinL =left1;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <turnCar+0xb4>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	81fb      	strh	r3, [r7, #14]
		pinR =right2;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <turnCar+0xb8>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	81bb      	strh	r3, [r7, #12]
 8001396:	e005      	b.n	80013a4 <turnCar+0x54>

	}else{ //counter clockwise
		pinL =left2;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <turnCar+0xbc>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	81fb      	strh	r3, [r7, #14]
		pinR =right1;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <turnCar+0xc0>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	81bb      	strh	r3, [r7, #12]
	}

	counter = 1000;
 80013a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a8:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(pinType, pinL | pinR , GPIO_PIN_SET);
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <turnCar+0xc4>)
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	89fa      	ldrh	r2, [r7, #14]
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2201      	movs	r2, #1
 80013b8:	4619      	mov	r1, r3
 80013ba:	f002 fa21 	bl	8003800 <HAL_GPIO_WritePin>
	while(abs(currentD-degree) > 5  && counter != 0){
 80013be:	e00a      	b.n	80013d6 <turnCar+0x86>
		HAL_Delay(5);
 80013c0:	2005      	movs	r0, #5
 80013c2:	f001 fbbf 	bl	8002b44 <HAL_Delay>
		currentD =readCompass(2);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff ff02 	bl	80011d0 <readCompass>
 80013cc:	4603      	mov	r3, r0
 80013ce:	813b      	strh	r3, [r7, #8]
		--counter;
 80013d0:	897b      	ldrh	r3, [r7, #10]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	817b      	strh	r3, [r7, #10]
	while(abs(currentD-degree) > 5  && counter != 0){
 80013d6:	893a      	ldrh	r2, [r7, #8]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bfb8      	it	lt
 80013e0:	425b      	neglt	r3, r3
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	dd02      	ble.n	80013ec <turnCar+0x9c>
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e9      	bne.n	80013c0 <turnCar+0x70>
	}
	resetMotorPins();
 80013ec:	f000 f814 	bl	8001418 <resetMotorPins>

	readCompass(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff feed 	bl	80011d0 <readCompass>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	b60b60b7 	.word	0xb60b60b7
 8001404:	200000c4 	.word	0x200000c4
 8001408:	200000ca 	.word	0x200000ca
 800140c:	200000c6 	.word	0x200000c6
 8001410:	200000c8 	.word	0x200000c8
 8001414:	200000c0 	.word	0x200000c0

08001418 <resetMotorPins>:

void resetMotorPins(){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(pinType, left1 | left2 | right1 | right2, GPIO_PIN_RESET);
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <resetMotorPins+0x30>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <resetMotorPins+0x34>)
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <resetMotorPins+0x38>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	4313      	orrs	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <resetMotorPins+0x3c>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <resetMotorPins+0x40>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4313      	orrs	r3, r2
 800143a:	b29b      	uxth	r3, r3
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	f002 f9de 	bl	8003800 <HAL_GPIO_WritePin>

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200000c0 	.word	0x200000c0
 800144c:	200000c4 	.word	0x200000c4
 8001450:	200000c6 	.word	0x200000c6
 8001454:	200000c8 	.word	0x200000c8
 8001458:	200000ca 	.word	0x200000ca

0800145c <motorGoForwardReturn>:

void motorGoForwardReturn(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	data =20; // communication code
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <motorGoForwardReturn+0x18>)
 8001462:	2214      	movs	r2, #20
 8001464:	701a      	strb	r2, [r3, #0]
	sendData(&data,1);
 8001466:	2101      	movs	r1, #1
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <motorGoForwardReturn+0x18>)
 800146a:	f7ff fcd7 	bl	8000e1c <sendData>

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000d2 	.word	0x200000d2

08001478 <sendMotorMissionEnded>:

void sendMotorMissionEnded(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	data =21;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <sendMotorMissionEnded+0x18>)
 800147e:	2215      	movs	r2, #21
 8001480:	701a      	strb	r2, [r3, #0]
	sendData(&data,1);
 8001482:	2101      	movs	r1, #1
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <sendMotorMissionEnded+0x18>)
 8001486:	f7ff fcc9 	bl	8000e1c <sendData>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000d2 	.word	0x200000d2

08001494 <motorTimerCallback>:

void motorTimerCallback(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

	--value;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <motorTimerCallback+0x34>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <motorTimerCallback+0x34>)
 80014a8:	801a      	strh	r2, [r3, #0]
	if(value <= 0){
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <motorTimerCallback+0x34>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dc06      	bgt.n	80014c2 <motorTimerCallback+0x2e>
		resetMotorPins();
 80014b4:	f7ff ffb0 	bl	8001418 <resetMotorPins>
		HAL_TIM_Base_Stop_IT(mTimer);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <motorTimerCallback+0x38>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fe2e 	bl	800511e <HAL_TIM_Base_Stop_IT>
	}
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000d0 	.word	0x200000d0
 80014cc:	200000cc 	.word	0x200000cc

080014d0 <initTemperatureSensor>:
static GPIO_InitTypeDef GPIO_InitStruct = {0};
static uint8_t tempData[3];
static TIM_HandleTypeDef* timer;

//initialize sensor to be used with provided pins
void initTemperatureSensor(GPIO_TypeDef* pinT,uint16_t pinN,TIM_HandleTypeDef* tim){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	460b      	mov	r3, r1
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	817b      	strh	r3, [r7, #10]
	pinType =pinT;
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <initTemperatureSensor+0x44>)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6013      	str	r3, [r2, #0]
	pin =pinN;
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <initTemperatureSensor+0x48>)
 80014e6:	897b      	ldrh	r3, [r7, #10]
 80014e8:	8013      	strh	r3, [r2, #0]
	timer =tim;
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <initTemperatureSensor+0x4c>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]

	GPIO_InitStruct.Pin = pin;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <initTemperatureSensor+0x48>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <initTemperatureSensor+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <initTemperatureSensor+0x50>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <initTemperatureSensor+0x50>)
 8001502:	2203      	movs	r2, #3
 8001504:	60da      	str	r2, [r3, #12]

	setSensorMode();  // set 12 bit mode
 8001506:	f000 f865 	bl	80015d4 <setSensorMode>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000d4 	.word	0x200000d4
 8001518:	200000d8 	.word	0x200000d8
 800151c:	200000f4 	.word	0x200000f4
 8001520:	200000dc 	.word	0x200000dc

08001524 <setPinOutput>:

// set pin type as output
void setPinOutput(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <setPinOutput+0x1c>)
 800152a:	2201      	movs	r2, #1
 800152c:	605a      	str	r2, [r3, #4]

	HAL_GPIO_Init(pinType, &GPIO_InitStruct);
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <setPinOutput+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4903      	ldr	r1, [pc, #12]	; (8001540 <setPinOutput+0x1c>)
 8001534:	4618      	mov	r0, r3
 8001536:	f001 ffc9 	bl	80034cc <HAL_GPIO_Init>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000dc 	.word	0x200000dc
 8001544:	200000d4 	.word	0x200000d4

08001548 <setPinInput>:


// set pin type as input
void setPinInput(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <setPinInput+0x1c>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]

	HAL_GPIO_Init(pinType, &GPIO_InitStruct);
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <setPinInput+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4903      	ldr	r1, [pc, #12]	; (8001564 <setPinInput+0x1c>)
 8001558:	4618      	mov	r0, r3
 800155a:	f001 ffb7 	bl	80034cc <HAL_GPIO_Init>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000dc 	.word	0x200000dc
 8001568:	200000d4 	.word	0x200000d4

0800156c <sendResetPulse>:

// initialize sensor with reset pulse
uint8_t sendResetPulse(){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint8_t ret;

	setPinOutput();
 8001572:	f7ff ffd7 	bl	8001524 <setPinOutput>

	HAL_GPIO_WritePin(pinType, pin, GPIO_PIN_RESET);
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <sendResetPulse+0x60>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <sendResetPulse+0x64>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	f002 f93d 	bl	8003800 <HAL_GPIO_WritePin>

	delay_us(480);
 8001586:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800158a:	f7ff fc6d 	bl	8000e68 <delay_us>

	setPinInput();
 800158e:	f7ff ffdb 	bl	8001548 <setPinInput>

	delay_us(80);
 8001592:	2050      	movs	r0, #80	; 0x50
 8001594:	f7ff fc68 	bl	8000e68 <delay_us>

	if(HAL_GPIO_ReadPin(pinType, pin) == GPIO_PIN_RESET){
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <sendResetPulse+0x60>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <sendResetPulse+0x64>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f002 f914 	bl	80037d0 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <sendResetPulse+0x48>
		ret = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e001      	b.n	80015b8 <sendResetPulse+0x4c>
	}
	else{
		ret = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	71fb      	strb	r3, [r7, #7]
	}

	delay_us(400);
 80015b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015bc:	f7ff fc54 	bl	8000e68 <delay_us>

	return ret;
 80015c0:	79fb      	ldrb	r3, [r7, #7]

}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000d4 	.word	0x200000d4
 80015d0:	200000d8 	.word	0x200000d8

080015d4 <setSensorMode>:

// set sensor mode for 12 bit
void setSensorMode(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

	sendResetPulse();
 80015d8:	f7ff ffc8 	bl	800156c <sendResetPulse>
	writeTempSensor(0xcc);  //skip sensor
 80015dc:	20cc      	movs	r0, #204	; 0xcc
 80015de:	f000 f80f 	bl	8001600 <writeTempSensor>
	writeTempSensor(0x4e);  // write command
 80015e2:	204e      	movs	r0, #78	; 0x4e
 80015e4:	f000 f80c 	bl	8001600 <writeTempSensor>

	writeTempSensor(80);  // high temperature
 80015e8:	2050      	movs	r0, #80	; 0x50
 80015ea:	f000 f809 	bl	8001600 <writeTempSensor>
	writeTempSensor(10);  // low temperature
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 f806 	bl	8001600 <writeTempSensor>
	writeTempSensor(127);  // 12 bit mode
 80015f4:	207f      	movs	r0, #127	; 0x7f
 80015f6:	f000 f803 	bl	8001600 <writeTempSensor>

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <writeTempSensor>:

// write operation to temp sensor
void writeTempSensor(uint8_t data){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]


	for(int i=0;i<8;++i){
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e02c      	b.n	800166a <writeTempSensor+0x6a>

		if(data & (1 << i )){  // write 1
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	fa42 f303 	asr.w	r3, r2, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d012      	beq.n	8001646 <writeTempSensor+0x46>
			setPinOutput();
 8001620:	f7ff ff80 	bl	8001524 <setPinOutput>
			HAL_GPIO_WritePin(pinType, pin, GPIO_PIN_RESET);
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <writeTempSensor+0x78>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <writeTempSensor+0x7c>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	4619      	mov	r1, r3
 8001630:	f002 f8e6 	bl	8003800 <HAL_GPIO_WritePin>
			delay_us(1);  // wait 1 microsecond
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fc17 	bl	8000e68 <delay_us>
			setPinInput();
 800163a:	f7ff ff85 	bl	8001548 <setPinInput>
			delay_us(60);  // wait period
 800163e:	203c      	movs	r0, #60	; 0x3c
 8001640:	f7ff fc12 	bl	8000e68 <delay_us>
 8001644:	e00e      	b.n	8001664 <writeTempSensor+0x64>

		}else{  // write 0
			setPinOutput();
 8001646:	f7ff ff6d 	bl	8001524 <setPinOutput>
			HAL_GPIO_WritePin(pinType, pin, GPIO_PIN_RESET);
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <writeTempSensor+0x78>)
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <writeTempSensor+0x7c>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	f002 f8d3 	bl	8003800 <HAL_GPIO_WritePin>
			delay_us(60);
 800165a:	203c      	movs	r0, #60	; 0x3c
 800165c:	f7ff fc04 	bl	8000e68 <delay_us>
			setPinInput();
 8001660:	f7ff ff72 	bl	8001548 <setPinInput>
	for(int i=0;i<8;++i){
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b07      	cmp	r3, #7
 800166e:	ddcf      	ble.n	8001610 <writeTempSensor+0x10>
		}
	}
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000d4 	.word	0x200000d4
 800167c:	200000d8 	.word	0x200000d8

08001680 <readTempSensor>:

// read operation from temp sensor
uint8_t readTempSensor(){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t value =0;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]

	for(int i=0;i<8;++i){
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	e029      	b.n	80016e4 <readTempSensor+0x64>
		setPinOutput();
 8001690:	f7ff ff48 	bl	8001524 <setPinOutput>

		HAL_GPIO_WritePin(pinType, pin, GPIO_PIN_RESET);
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <readTempSensor+0x74>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <readTempSensor+0x78>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	f002 f8ae 	bl	8003800 <HAL_GPIO_WritePin>
		delay_us(2);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f7ff fbdf 	bl	8000e68 <delay_us>

		setPinInput();
 80016aa:	f7ff ff4d 	bl	8001548 <setPinInput>

		if(HAL_GPIO_ReadPin(pinType, pin) == GPIO_PIN_SET){
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <readTempSensor+0x74>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <readTempSensor+0x78>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f002 f889 	bl	80037d0 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d109      	bne.n	80016d8 <readTempSensor+0x58>
			value |= 1 << i;
 80016c4:	2201      	movs	r2, #1
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	71fb      	strb	r3, [r7, #7]
		}

		delay_us(60);
 80016d8:	203c      	movs	r0, #60	; 0x3c
 80016da:	f7ff fbc5 	bl	8000e68 <delay_us>
	for(int i=0;i<8;++i){
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	ddd2      	ble.n	8001690 <readTempSensor+0x10>
	}

	return value;
 80016ea:	79fb      	ldrb	r3, [r7, #7]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000d4 	.word	0x200000d4
 80016f8:	200000d8 	.word	0x200000d8

080016fc <measureTemperature>:

// measure temperature from sensor and send the data
void measureTemperature(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

	sendResetPulse();
 8001700:	f7ff ff34 	bl	800156c <sendResetPulse>
	writeTempSensor(0xcc);  // skip rom
 8001704:	20cc      	movs	r0, #204	; 0xcc
 8001706:	f7ff ff7b 	bl	8001600 <writeTempSensor>
	writeTempSensor(0x44);  // measure temperature
 800170a:	2044      	movs	r0, #68	; 0x44
 800170c:	f7ff ff78 	bl	8001600 <writeTempSensor>

	HAL_TIM_Base_Start_IT(timer);
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <measureTemperature+0x24>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fcde 	bl	80050d6 <HAL_TIM_Base_Start_IT>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000f4 	.word	0x200000f4

08001724 <sendTemperatureVal>:

void sendTemperatureVal(){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

	sendResetPulse();
 8001728:	f7ff ff20 	bl	800156c <sendResetPulse>
	writeTempSensor(0xcc);  // skip rom
 800172c:	20cc      	movs	r0, #204	; 0xcc
 800172e:	f7ff ff67 	bl	8001600 <writeTempSensor>
	writeTempSensor(0xbe);   // read scratchpad
 8001732:	20be      	movs	r0, #190	; 0xbe
 8001734:	f7ff ff64 	bl	8001600 <writeTempSensor>

	tempData[0] =60; // temperature communication code
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <sendTemperatureVal+0x40>)
 800173a:	223c      	movs	r2, #60	; 0x3c
 800173c:	701a      	strb	r2, [r3, #0]
	tempData[2] =readTempSensor();  // lsb byte
 800173e:	f7ff ff9f 	bl	8001680 <readTempSensor>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <sendTemperatureVal+0x40>)
 8001748:	709a      	strb	r2, [r3, #2]
	tempData[1] =readTempSensor();  // msb byte
 800174a:	f7ff ff99 	bl	8001680 <readTempSensor>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <sendTemperatureVal+0x40>)
 8001754:	705a      	strb	r2, [r3, #1]

	sendDataDMA(tempData,3);
 8001756:	2103      	movs	r1, #3
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <sendTemperatureVal+0x40>)
 800175a:	f7ff fb4b 	bl	8000df4 <sendDataDMA>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200000f0 	.word	0x200000f0

08001768 <initUltraSonicSensor>:
static uint8_t data[4];
static TIM_HandleTypeDef* timer;

void initUltraSonicSensor(GPIO_TypeDef* sensorLTP,uint16_t trigLP, GPIO_TypeDef* sensorLEP,uint16_t echoLP,
		GPIO_TypeDef* sensorCTP, uint16_t trigCP,GPIO_TypeDef* sensorCEP, uint16_t echoCP,GPIO_TypeDef* sensorRTP,
		uint16_t trigRP,GPIO_TypeDef* sensorREP, uint16_t echoRP,TIM_HandleTypeDef* tim){
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	461a      	mov	r2, r3
 8001774:	460b      	mov	r3, r1
 8001776:	817b      	strh	r3, [r7, #10]
 8001778:	4613      	mov	r3, r2
 800177a:	813b      	strh	r3, [r7, #8]

	sensorLT =sensorLTP;
 800177c:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <initUltraSonicSensor+0x70>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6013      	str	r3, [r2, #0]
	sensorLE =sensorLEP;
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <initUltraSonicSensor+0x74>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6013      	str	r3, [r2, #0]
	sensorCT =sensorCTP;
 8001788:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <initUltraSonicSensor+0x78>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6013      	str	r3, [r2, #0]
	sensorCE =sensorCEP;
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <initUltraSonicSensor+0x7c>)
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	6013      	str	r3, [r2, #0]
	sensorRT =sensorRTP;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <initUltraSonicSensor+0x80>)
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	6013      	str	r3, [r2, #0]
	sensorRE =sensorREP;
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <initUltraSonicSensor+0x84>)
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	6013      	str	r3, [r2, #0]

	trigL =trigLP;
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <initUltraSonicSensor+0x88>)
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	8013      	strh	r3, [r2, #0]
	trigC =trigCP;
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <initUltraSonicSensor+0x8c>)
 80017a8:	8bbb      	ldrh	r3, [r7, #28]
 80017aa:	8013      	strh	r3, [r2, #0]
	trigR =trigRP;
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <initUltraSonicSensor+0x90>)
 80017ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b0:	8013      	strh	r3, [r2, #0]

	echoL =echoLP;
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <initUltraSonicSensor+0x94>)
 80017b4:	893b      	ldrh	r3, [r7, #8]
 80017b6:	8013      	strh	r3, [r2, #0]
	echoC =echoCP;
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <initUltraSonicSensor+0x98>)
 80017ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017bc:	8013      	strh	r3, [r2, #0]
	echoR =echoRP;
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <initUltraSonicSensor+0x9c>)
 80017c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80017c2:	8013      	strh	r3, [r2, #0]

	timer =tim;
 80017c4:	4a10      	ldr	r2, [pc, #64]	; (8001808 <initUltraSonicSensor+0xa0>)
 80017c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c8:	6013      	str	r3, [r2, #0]

}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200000f8 	.word	0x200000f8
 80017dc:	20000104 	.word	0x20000104
 80017e0:	200000fc 	.word	0x200000fc
 80017e4:	20000108 	.word	0x20000108
 80017e8:	20000100 	.word	0x20000100
 80017ec:	2000010c 	.word	0x2000010c
 80017f0:	20000110 	.word	0x20000110
 80017f4:	20000112 	.word	0x20000112
 80017f8:	20000114 	.word	0x20000114
 80017fc:	20000116 	.word	0x20000116
 8001800:	20000118 	.word	0x20000118
 8001804:	2000011a 	.word	0x2000011a
 8001808:	20000128 	.word	0x20000128

0800180c <readSensor>:

uint8_t readSensor(GPIO_TypeDef* sensorT,uint16_t trig,GPIO_TypeDef* sensorE,uint16_t echo){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	461a      	mov	r2, r3
 8001818:	460b      	mov	r3, r1
 800181a:	817b      	strh	r3, [r7, #10]
 800181c:	4613      	mov	r3, r2
 800181e:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(sensorT, trig, GPIO_PIN_SET);
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	2201      	movs	r2, #1
 8001824:	4619      	mov	r1, r3
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f001 ffea 	bl	8003800 <HAL_GPIO_WritePin>

	delay_us(10); //10 microseconds
 800182c:	200a      	movs	r0, #10
 800182e:	f7ff fb1b 	bl	8000e68 <delay_us>

	HAL_GPIO_WritePin(sensorT,trig,GPIO_PIN_RESET);
 8001832:	897b      	ldrh	r3, [r7, #10]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f001 ffe1 	bl	8003800 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(timer,0);
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <readSensor+0xfc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
	while(!HAL_GPIO_ReadPin(sensorE, echo) && __HAL_TIM_GET_COUNTER(timer) <= 500);
 8001848:	bf00      	nop
 800184a:	893b      	ldrh	r3, [r7, #8]
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 ffbe 	bl	80037d0 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <readSensor+0x5c>
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <readSensor+0xfc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001866:	d9f0      	bls.n	800184a <readSensor+0x3e>
	if(100 < __HAL_TIM_GET_COUNTER(timer) && __HAL_TIM_GET_COUNTER(timer) < 500){
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <readSensor+0xfc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d93f      	bls.n	80018f4 <readSensor+0xe8>
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <readSensor+0xfc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001880:	d238      	bcs.n	80018f4 <readSensor+0xe8>
		__HAL_TIM_SET_COUNTER(timer,0);
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <readSensor+0xfc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(sensorE,echo) && __HAL_TIM_GET_COUNTER(timer) <= 10000);
 800188c:	bf00      	nop
 800188e:	893b      	ldrh	r3, [r7, #8]
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f001 ff9c 	bl	80037d0 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <readSensor+0xa2>
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <readSensor+0xfc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d9ef      	bls.n	800188e <readSensor+0x82>
		localTime = __HAL_TIM_GET_COUNTER(timer);
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <readSensor+0xfc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <readSensor+0x100>)
 80018b8:	6013      	str	r3, [r2, #0]

		if(localTime < 10000){
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <readSensor+0x100>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f242 720f 	movw	r2, #9999	; 0x270f
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d812      	bhi.n	80018ec <readSensor+0xe0>
			distance =velocity*localTime;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <readSensor+0x100>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001910 <readSensor+0x104>
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018de:	edc7 7a00 	vstr	s15, [r7]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <readSensor+0x108>)
 80018e8:	701a      	strb	r2, [r3, #0]
		if(localTime < 10000){
 80018ea:	e006      	b.n	80018fa <readSensor+0xee>
		}
		else{
			distance =0;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <readSensor+0x108>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
		if(localTime < 10000){
 80018f2:	e002      	b.n	80018fa <readSensor+0xee>
		}
	}else{
		distance = 0;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <readSensor+0x108>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
	}

	return distance;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <readSensor+0x108>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000128 	.word	0x20000128
 800190c:	2000011c 	.word	0x2000011c
 8001910:	3c8c9321 	.word	0x3c8c9321
 8001914:	20000120 	.word	0x20000120

08001918 <measureLeftDistance>:

uint8_t measureLeftDistance(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	return readSensor(sensorLT,trigL,sensorLE,echoL);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <measureLeftDistance+0x20>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <measureLeftDistance+0x24>)
 8001922:	8819      	ldrh	r1, [r3, #0]
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <measureLeftDistance+0x28>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <measureLeftDistance+0x2c>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f7ff ff6e 	bl	800180c <readSensor>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200000f8 	.word	0x200000f8
 800193c:	20000110 	.word	0x20000110
 8001940:	20000104 	.word	0x20000104
 8001944:	20000116 	.word	0x20000116

08001948 <measureCenterDistance>:

uint8_t measureCenterDistance(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	return readSensor(sensorCT,trigC,sensorCE,echoC);
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <measureCenterDistance+0x20>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <measureCenterDistance+0x24>)
 8001952:	8819      	ldrh	r1, [r3, #0]
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <measureCenterDistance+0x28>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <measureCenterDistance+0x2c>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	f7ff ff56 	bl	800180c <readSensor>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200000fc 	.word	0x200000fc
 800196c:	20000112 	.word	0x20000112
 8001970:	20000108 	.word	0x20000108
 8001974:	20000118 	.word	0x20000118

08001978 <measureRightDistance>:

uint8_t measureRightDistance(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	return readSensor(sensorRT,trigR,sensorRE,echoR);
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <measureRightDistance+0x20>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <measureRightDistance+0x24>)
 8001982:	8819      	ldrh	r1, [r3, #0]
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <measureRightDistance+0x28>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <measureRightDistance+0x2c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	f7ff ff3e 	bl	800180c <readSensor>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000100 	.word	0x20000100
 800199c:	20000114 	.word	0x20000114
 80019a0:	2000010c 	.word	0x2000010c
 80019a4:	2000011a 	.word	0x2000011a

080019a8 <measureDistances>:

void measureDistances(uint8_t cancel){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]

	leftD =measureLeftDistance();
 80019b2:	f7ff ffb1 	bl	8001918 <measureLeftDistance>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <measureDistances+0x90>)
 80019bc:	701a      	strb	r2, [r3, #0]
	if(cancel == 1){
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d103      	bne.n	80019cc <measureDistances+0x24>
		centerD =0;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <measureDistances+0x94>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e017      	b.n	80019fc <measureDistances+0x54>
	}else{
		uint8_t val;
		centerD =0;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <measureDistances+0x94>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i =0;i<10;++i){
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e00e      	b.n	80019f6 <measureDistances+0x4e>
			val =measureCenterDistance();
 80019d8:	f7ff ffb6 	bl	8001948 <measureCenterDistance>
 80019dc:	4603      	mov	r3, r0
 80019de:	73bb      	strb	r3, [r7, #14]
			if(centerD < val){
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <measureDistances+0x94>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	7bba      	ldrb	r2, [r7, #14]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d902      	bls.n	80019f0 <measureDistances+0x48>
				centerD =val;
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <measureDistances+0x94>)
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	7013      	strb	r3, [r2, #0]
		for(uint8_t i =0;i<10;++i){
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3301      	adds	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	2b09      	cmp	r3, #9
 80019fa:	d9ed      	bls.n	80019d8 <measureDistances+0x30>
			}
		}
	}
	rightD = measureRightDistance();
 80019fc:	f7ff ffbc 	bl	8001978 <measureRightDistance>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <measureDistances+0x98>)
 8001a06:	701a      	strb	r2, [r3, #0]

	data[0] = 30;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <measureDistances+0x9c>)
 8001a0a:	221e      	movs	r2, #30
 8001a0c:	701a      	strb	r2, [r3, #0]
	data[1] = leftD;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <measureDistances+0x90>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <measureDistances+0x9c>)
 8001a14:	705a      	strb	r2, [r3, #1]
	data[2] = centerD;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <measureDistances+0x94>)
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <measureDistances+0x9c>)
 8001a1c:	709a      	strb	r2, [r3, #2]
	data[3] = rightD;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <measureDistances+0x98>)
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <measureDistances+0x9c>)
 8001a24:	70da      	strb	r2, [r3, #3]

	sendData(data,4);
 8001a26:	2104      	movs	r1, #4
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <measureDistances+0x9c>)
 8001a2a:	f7ff f9f7 	bl	8000e1c <sendData>

}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000121 	.word	0x20000121
 8001a3c:	20000122 	.word	0x20000122
 8001a40:	20000123 	.word	0x20000123
 8001a44:	20000124 	.word	0x20000124

08001a48 <createQueue>:
#include "WorkQueue.h"
#include <stdlib.h>
#include <string.h>

WorkQueue* createQueue(uint16_t capacity){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
    WorkQueue* queue = (WorkQueue*) malloc(sizeof(WorkQueue));
 8001a52:	200c      	movs	r0, #12
 8001a54:	f004 fff6 	bl	8006a44 <malloc>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]
    queue->capacity = capacity;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	805a      	strh	r2, [r3, #2]
    queue->front = 0;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	80da      	strh	r2, [r3, #6]
    queue->size = 0;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
    queue->rear = capacity - 1;
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	809a      	strh	r2, [r3, #4]
    queue->work = (Work*) malloc(queue->capacity * sizeof(Work));
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	885b      	ldrh	r3, [r3, #2]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 ffdd 	bl	8006a44 <malloc>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	609a      	str	r2, [r3, #8]
    return queue;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <isFull>:

// Queue is full when size becomes equal to the capacity
uint8_t isFull(WorkQueue* queue){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	return (queue->size == queue->capacity);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	885b      	ldrh	r3, [r3, #2]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <isEmpty>:

// Queue is empty when size is 0
uint8_t isEmpty(WorkQueue* queue){
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	return (queue->size == 0);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <enqueue>:

// Function to add an item to the queue.
// It changes rear and size
void enqueue(WorkQueue* queue, uint8_t* item,uint8_t length){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	71fb      	strb	r3, [r7, #7]
    if (isFull(queue))
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff ffd2 	bl	8001a9c <isFull>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d122      	bne.n	8001b44 <enqueue+0x60>
        return;

    queue->rear = (queue->rear + 1)%queue->capacity;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	889b      	ldrh	r3, [r3, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	8852      	ldrh	r2, [r2, #2]
 8001b08:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b0c:	fb02 f201 	mul.w	r2, r2, r1
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	809a      	strh	r2, [r3, #4]
    memcpy(queue->work[queue->rear].data,item,length);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	889b      	ldrh	r3, [r3, #4]
 8001b20:	4619      	mov	r1, r3
 8001b22:	460b      	mov	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	f004 ff8f 	bl	8006a54 <memcpy>
    ++queue->size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	e000      	b.n	8001b46 <enqueue+0x62>
        return;
 8001b44:	bf00      	nop
}
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <dequeue>:


// Function to remove an item from queue.
// It changes front and size
uint8_t* dequeue(WorkQueue* queue){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffb4 	bl	8001ac2 <isEmpty>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <dequeue+0x18>
        return NULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e01d      	b.n	8001ba0 <dequeue+0x54>

    uint8_t* item = queue->work[queue->front].data;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	88db      	ldrh	r3, [r3, #6]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	460b      	mov	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)%queue->capacity;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	88db      	ldrh	r3, [r3, #6]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	8852      	ldrh	r2, [r2, #2]
 8001b82:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b86:	fb02 f201 	mul.w	r2, r2, r1
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	80da      	strh	r2, [r3, #6]
    --queue->size;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	801a      	strh	r2, [r3, #0]

    return item;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	if(htim == &htim1){
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d112      	bne.n	8001bde <HAL_TIM_PeriodElapsedCallback+0x36>
		motorTimerCallback();
 8001bb8:	f7ff fc6c 	bl	8001494 <motorTimerCallback>
		workData[0] =21; // go forward return
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bbe:	2215      	movs	r2, #21
 8001bc0:	701a      	strb	r2, [r3, #0]
		workData[1] =getMotorValue();
 8001bc2:	f7ff fbb9 	bl	8001338 <getMotorValue>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bcc:	705a      	strb	r2, [r3, #1]
		enqueue(workQueue,workData,2);
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	491a      	ldr	r1, [pc, #104]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff84 	bl	8001ae4 <enqueue>
	}else if(htim == &htim4){  // read temperature
		HAL_TIM_Base_Stop_IT(&htim4); // stop timer
		workData[0] =61; // send temperature value
		enqueue(workQueue,workData,1);
	}
}
 8001bdc:	e029      	b.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x8a>
	}else if(htim == &htim2){ // read compass and ultrasonic sensor
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d114      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x68>
		workData[0] = 40;   // read compass
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001be8:	2228      	movs	r2, #40	; 0x28
 8001bea:	701a      	strb	r2, [r3, #0]
		enqueue(workQueue,workData,1);
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4913      	ldr	r1, [pc, #76]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff75 	bl	8001ae4 <enqueue>
		workData[0] =30; // read distances
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bfc:	221e      	movs	r2, #30
 8001bfe:	701a      	strb	r2, [r3, #0]
		enqueue(workQueue,workData,1);
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff6b 	bl	8001ae4 <enqueue>
}
 8001c0e:	e010      	b.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x8a>
	}else if(htim == &htim4){  // read temperature
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10c      	bne.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x8a>
		HAL_TIM_Base_Stop_IT(&htim4); // stop timer
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c1a:	f003 fa80 	bl	800511e <HAL_TIM_Base_Stop_IT>
		workData[0] =61; // send temperature value
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c20:	223d      	movs	r2, #61	; 0x3d
 8001c22:	701a      	strb	r2, [r3, #0]
		enqueue(workQueue,workData,1);
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4905      	ldr	r1, [pc, #20]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff59 	bl	8001ae4 <enqueue>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000318 	.word	0x20000318
 8001c40:	20000358 	.word	0x20000358
 8001c44:	20000314 	.word	0x20000314
 8001c48:	2000035c 	.word	0x2000035c
 8001c4c:	20000140 	.word	0x20000140

08001c50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
 /*  NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
*/

  enqueue(workQueue,rxData,3);  // add data to the queue
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_UART_RxCpltCallback+0x20>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4905      	ldr	r1, [pc, #20]	; (8001c74 <HAL_UART_RxCpltCallback+0x24>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff3f 	bl	8001ae4 <enqueue>

}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000314 	.word	0x20000314
 8001c74:	2000013c 	.word	0x2000013c

08001c78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  workData[0] =50;  // flame sensor
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c84:	2232      	movs	r2, #50	; 0x32
 8001c86:	701a      	strb	r2, [r3, #0]
  enqueue(workQueue,workData,1);
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff27 	bl	8001ae4 <enqueue>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000358 	.word	0x20000358
 8001ca4:	20000314 	.word	0x20000314

08001ca8 <startSensorTimers>:

void startSensorTimers(){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2); // magnetometer timer
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <startSensorTimers+0x10>)
 8001cae:	f003 fa12 	bl	80050d6 <HAL_TIM_Base_Start_IT>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000035c 	.word	0x2000035c

08001cbc <stopSensorTimers>:

void stopSensorTimers(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2); // magnetometer timer
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <stopSensorTimers+0x10>)
 8001cc2:	f003 fa2c 	bl	800511e <HAL_TIM_Base_Stop_IT>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000035c 	.word	0x2000035c

08001cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd6:	f000 fec3 	bl	8002a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cda:	f000 f93f 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cde:	f000 fb73 	bl	80023c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce2:	f000 fb49 	bl	8002378 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ce6:	f000 f9cf 	bl	8002088 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cea:	f000 fa23 	bl	8002134 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cee:	f000 fa73 	bl	80021d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cf2:	f000 fac3 	bl	800227c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001cf6:	f000 f999 	bl	800202c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001cfa:	f000 fb13 	bl	8002324 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  workQueue =createQueue(500);
 8001cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d02:	f7ff fea1 	bl	8001a48 <createQueue>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b8a      	ldr	r3, [pc, #552]	; (8001f34 <main+0x264>)
 8001d0a:	601a      	str	r2, [r3, #0]

    initDelayMS(&htim3);
 8001d0c:	488a      	ldr	r0, [pc, #552]	; (8001f38 <main+0x268>)
 8001d0e:	f7ff f899 	bl	8000e44 <initDelayMS>

    initMotorDriver(LeftMotor1_GPIO_Port,LeftMotor1_Pin,LeftMotor2_Pin,RightMotor1_Pin,RightMotor2_Pin,&htim1);
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <main+0x26c>)
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d20:	2204      	movs	r2, #4
 8001d22:	2102      	movs	r1, #2
 8001d24:	4886      	ldr	r0, [pc, #536]	; (8001f40 <main+0x270>)
 8001d26:	f7ff fa9d 	bl	8001264 <initMotorDriver>

    initBluetooth(&huart1,rxData,3);
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4985      	ldr	r1, [pc, #532]	; (8001f44 <main+0x274>)
 8001d2e:	4886      	ldr	r0, [pc, #536]	; (8001f48 <main+0x278>)
 8001d30:	f7ff f848 	bl	8000dc4 <initBluetooth>

    initMagnetometer(&hi2c1);
 8001d34:	4885      	ldr	r0, [pc, #532]	; (8001f4c <main+0x27c>)
 8001d36:	f7ff f905 	bl	8000f44 <initMagnetometer>

    initTemperatureSensor(Temp_Sensor_GPIO_Port,Temp_Sensor_Pin,&htim4);
 8001d3a:	4a85      	ldr	r2, [pc, #532]	; (8001f50 <main+0x280>)
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	4885      	ldr	r0, [pc, #532]	; (8001f54 <main+0x284>)
 8001d40:	f7ff fbc6 	bl	80014d0 <initTemperatureSensor>

    initFlameSensor(Flame_Sensor_GPIO_Port,Flame_Sensor_Pin);
 8001d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d48:	4882      	ldr	r0, [pc, #520]	; (8001f54 <main+0x284>)
 8001d4a:	f7ff f8a7 	bl	8000e9c <initFlameSensor>

    initUltraSonicSensor(LeftSensorTrg_GPIO_Port,LeftSensorTrg_Pin,LeftSensorEcho_GPIO_Port,LeftSensorEcho_Pin
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <main+0x268>)
 8001d50:	9308      	str	r3, [sp, #32]
 8001d52:	2301      	movs	r3, #1
 8001d54:	9307      	str	r3, [sp, #28]
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <main+0x284>)
 8001d58:	9306      	str	r3, [sp, #24]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	9305      	str	r3, [sp, #20]
 8001d5e:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <main+0x284>)
 8001d60:	9304      	str	r3, [sp, #16]
 8001d62:	2301      	movs	r3, #1
 8001d64:	9303      	str	r3, [sp, #12]
 8001d66:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <main+0x270>)
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <main+0x288>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2302      	movs	r3, #2
 8001d74:	4a78      	ldr	r2, [pc, #480]	; (8001f58 <main+0x288>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	4877      	ldr	r0, [pc, #476]	; (8001f58 <main+0x288>)
 8001d7a:	f7ff fcf5 	bl	8001768 <initUltraSonicSensor>
  		  ,CenterSensorTrg_GPIO_Port,CenterSensorTrg_Pin,CenterSensorEcho_GPIO_Port,CenterSensorEcho_Pin
  		  ,RightSensorTrg_GPIO_Port,RightSensorTrg_Pin,RightSensorEcho_GPIO_Port,RightSensorEcho_Pin,&htim3);

    startSensorTimers();
 8001d7e:	f7ff ff93 	bl	8001ca8 <startSensorTimers>
  /* USER CODE BEGIN WHILE */
    uint8_t* currentWork;
    uint16_t value;
  while (1)
  {
	  currentWork =dequeue(workQueue);
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <main+0x264>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fee0 	bl	8001b4c <dequeue>
 8001d8c:	6078      	str	r0, [r7, #4]
		  if(currentWork != NULL){
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80c8 	beq.w	8001f26 <main+0x256>
				switch(currentWork[0]){
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b0a      	subs	r3, #10
 8001d9c:	2b33      	cmp	r3, #51	; 0x33
 8001d9e:	f200 80c4 	bhi.w	8001f2a <main+0x25a>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <main+0xd8>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001e79 	.word	0x08001e79
 8001dac:	08001f2b 	.word	0x08001f2b
 8001db0:	08001f2b 	.word	0x08001f2b
 8001db4:	08001f2b 	.word	0x08001f2b
 8001db8:	08001f2b 	.word	0x08001f2b
 8001dbc:	08001f2b 	.word	0x08001f2b
 8001dc0:	08001f2b 	.word	0x08001f2b
 8001dc4:	08001f2b 	.word	0x08001f2b
 8001dc8:	08001f2b 	.word	0x08001f2b
 8001dcc:	08001f2b 	.word	0x08001f2b
 8001dd0:	08001ea7 	.word	0x08001ea7
 8001dd4:	08001ed9 	.word	0x08001ed9
 8001dd8:	08001f2b 	.word	0x08001f2b
 8001ddc:	08001f2b 	.word	0x08001f2b
 8001de0:	08001f2b 	.word	0x08001f2b
 8001de4:	08001efd 	.word	0x08001efd
 8001de8:	08001f2b 	.word	0x08001f2b
 8001dec:	08001f2b 	.word	0x08001f2b
 8001df0:	08001f2b 	.word	0x08001f2b
 8001df4:	08001f2b 	.word	0x08001f2b
 8001df8:	08001f05 	.word	0x08001f05
 8001dfc:	08001f2b 	.word	0x08001f2b
 8001e00:	08001f2b 	.word	0x08001f2b
 8001e04:	08001f2b 	.word	0x08001f2b
 8001e08:	08001f2b 	.word	0x08001f2b
 8001e0c:	08001f2b 	.word	0x08001f2b
 8001e10:	08001f2b 	.word	0x08001f2b
 8001e14:	08001f2b 	.word	0x08001f2b
 8001e18:	08001f2b 	.word	0x08001f2b
 8001e1c:	08001f2b 	.word	0x08001f2b
 8001e20:	08001f0d 	.word	0x08001f0d
 8001e24:	08001f2b 	.word	0x08001f2b
 8001e28:	08001f2b 	.word	0x08001f2b
 8001e2c:	08001f2b 	.word	0x08001f2b
 8001e30:	08001f2b 	.word	0x08001f2b
 8001e34:	08001f2b 	.word	0x08001f2b
 8001e38:	08001f2b 	.word	0x08001f2b
 8001e3c:	08001f2b 	.word	0x08001f2b
 8001e40:	08001f2b 	.word	0x08001f2b
 8001e44:	08001f2b 	.word	0x08001f2b
 8001e48:	08001f15 	.word	0x08001f15
 8001e4c:	08001f2b 	.word	0x08001f2b
 8001e50:	08001f2b 	.word	0x08001f2b
 8001e54:	08001f2b 	.word	0x08001f2b
 8001e58:	08001f2b 	.word	0x08001f2b
 8001e5c:	08001f2b 	.word	0x08001f2b
 8001e60:	08001f2b 	.word	0x08001f2b
 8001e64:	08001f2b 	.word	0x08001f2b
 8001e68:	08001f2b 	.word	0x08001f2b
 8001e6c:	08001f2b 	.word	0x08001f2b
 8001e70:	08001f1b 	.word	0x08001f1b
 8001e74:	08001f21 	.word	0x08001f21
				case 10:  // turn command
					stopSensorTimers();
 8001e78:	f7ff ff20 	bl	8001cbc <stopSensorTimers>
					value = ((uint16_t)(currentWork[1] << 8)) | currentWork[2];
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4313      	orrs	r3, r2
 8001e92:	807b      	strh	r3, [r7, #2]
					turnCar(value);
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fa5a 	bl	8001350 <turnCar>
					sendMotorMissionEnded();
 8001e9c:	f7ff faec 	bl	8001478 <sendMotorMissionEnded>
					startSensorTimers();
 8001ea0:	f7ff ff02 	bl	8001ca8 <startSensorTimers>
					break;
 8001ea4:	e044      	b.n	8001f30 <main+0x260>
				case 20 :  // go forward command
					stopSensorTimers();
 8001ea6:	f7ff ff09 	bl	8001cbc <stopSensorTimers>
					readCompass(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff f990 	bl	80011d0 <readCompass>
					measureDistances(0);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fd79 	bl	80019a8 <measureDistances>
					value = ((uint16_t)(currentWork[1] << 8)) | currentWork[2];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	807b      	strh	r3, [r7, #2]
					goForward(value);
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f9f9 	bl	80012c8 <goForward>
					break;
 8001ed6:	e02b      	b.n	8001f30 <main+0x260>
				case 21 : // go forward return
					readCompass(0);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff f979 	bl	80011d0 <readCompass>
					motorGoForwardReturn();
 8001ede:	f7ff fabd 	bl	800145c <motorGoForwardReturn>
					measureDistances(1);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7ff fd60 	bl	80019a8 <measureDistances>
					if(currentWork[1] == 0){
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3301      	adds	r3, #1
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11d      	bne.n	8001f2e <main+0x25e>
						sendMotorMissionEnded();
 8001ef2:	f7ff fac1 	bl	8001478 <sendMotorMissionEnded>
						startSensorTimers();
 8001ef6:	f7ff fed7 	bl	8001ca8 <startSensorTimers>
					}
					break;
 8001efa:	e018      	b.n	8001f2e <main+0x25e>
				case 25 : // stop mission command
					setMotorValue(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff fa0b 	bl	8001318 <setMotorValue>
					break;
 8001f02:	e015      	b.n	8001f30 <main+0x260>
				case 30 :
					measureDistances(0);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fd4f 	bl	80019a8 <measureDistances>
					break;
 8001f0a:	e011      	b.n	8001f30 <main+0x260>
				case 40:
					readCompass(0);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff f95f 	bl	80011d0 <readCompass>
					break;
 8001f12:	e00d      	b.n	8001f30 <main+0x260>
				case 50:
					readFlameSensor();
 8001f14:	f7fe ffde 	bl	8000ed4 <readFlameSensor>
					break;
 8001f18:	e00a      	b.n	8001f30 <main+0x260>
				case 60:  // measure temperature
					measureTemperature();
 8001f1a:	f7ff fbef 	bl	80016fc <measureTemperature>
					break;
 8001f1e:	e007      	b.n	8001f30 <main+0x260>
				case 61:  // send temperature value
					sendTemperatureVal();
 8001f20:	f7ff fc00 	bl	8001724 <sendTemperatureVal>
					break;
 8001f24:	e004      	b.n	8001f30 <main+0x260>
				default :
					break;
				}
		  }
 8001f26:	bf00      	nop
 8001f28:	e72b      	b.n	8001d82 <main+0xb2>
					break;
 8001f2a:	bf00      	nop
 8001f2c:	e729      	b.n	8001d82 <main+0xb2>
					break;
 8001f2e:	bf00      	nop
	  currentWork =dequeue(workQueue);
 8001f30:	e727      	b.n	8001d82 <main+0xb2>
 8001f32:	bf00      	nop
 8001f34:	20000314 	.word	0x20000314
 8001f38:	200001d4 	.word	0x200001d4
 8001f3c:	20000318 	.word	0x20000318
 8001f40:	40020400 	.word	0x40020400
 8001f44:	2000013c 	.word	0x2000013c
 8001f48:	200002d4 	.word	0x200002d4
 8001f4c:	20000180 	.word	0x20000180
 8001f50:	20000140 	.word	0x20000140
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020000 	.word	0x40020000

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b094      	sub	sp, #80	; 0x50
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	2230      	movs	r2, #48	; 0x30
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fd7d 	bl	8006a6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <SystemClock_Config+0xc8>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <SystemClock_Config+0xc8>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <SystemClock_Config+0xc8>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <SystemClock_Config+0xcc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a20      	ldr	r2, [pc, #128]	; (8002028 <SystemClock_Config+0xcc>)
 8001fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <SystemClock_Config+0xcc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fbc7 	bl	8004774 <HAL_RCC_OscConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fec:	f000 fab2 	bl	8002554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	2103      	movs	r1, #3
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fe21 	bl	8004c54 <HAL_RCC_ClockConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002018:	f000 fa9c 	bl	8002554 <Error_Handler>
  }
}
 800201c:	bf00      	nop
 800201e:	3750      	adds	r7, #80	; 0x50
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_I2C1_Init+0x50>)
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <MX_I2C1_Init+0x54>)
 8002034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_I2C1_Init+0x50>)
 8002038:	4a12      	ldr	r2, [pc, #72]	; (8002084 <MX_I2C1_Init+0x58>)
 800203a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_I2C1_Init+0x50>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_I2C1_Init+0x50>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_I2C1_Init+0x50>)
 800204a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <MX_I2C1_Init+0x50>)
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_I2C1_Init+0x50>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <MX_I2C1_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_I2C1_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_I2C1_Init+0x50>)
 800206a:	f001 fbfb 	bl	8003864 <HAL_I2C_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002074:	f000 fa6e 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000180 	.word	0x20000180
 8002080:	40005400 	.word	0x40005400
 8002084:	000186a0 	.word	0x000186a0

08002088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <MX_TIM1_Init+0xa4>)
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <MX_TIM1_Init+0xa8>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50000-1;
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <MX_TIM1_Init+0xa4>)
 80020ac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80020b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <MX_TIM1_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <MX_TIM1_Init+0xa4>)
 80020ba:	224f      	movs	r2, #79	; 0x4f
 80020bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_TIM1_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <MX_TIM1_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM1_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020d0:	4816      	ldr	r0, [pc, #88]	; (800212c <MX_TIM1_Init+0xa4>)
 80020d2:	f002 ffb1 	bl	8005038 <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020dc:	f000 fa3a 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	480f      	ldr	r0, [pc, #60]	; (800212c <MX_TIM1_Init+0xa4>)
 80020ee:	f003 f949 	bl	8005384 <HAL_TIM_ConfigClockSource>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020f8:	f000 fa2c 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	4619      	mov	r1, r3
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <MX_TIM1_Init+0xa4>)
 800210a:	f003 fb35 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002114:	f000 fa1e 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim1,TIM_SR_UIF);
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <MX_TIM1_Init+0xa4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0201 	mvn.w	r2, #1
 8002120:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000318 	.word	0x20000318
 8002130:	40010000 	.word	0x40010000

08002134 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <MX_TIM2_Init+0xa0>)
 8002152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <MX_TIM2_Init+0xa0>)
 800215a:	f242 720f 	movw	r2, #9999	; 0x270f
 800215e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <MX_TIM2_Init+0xa0>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <MX_TIM2_Init+0xa0>)
 8002168:	f241 3287 	movw	r2, #4999	; 0x1387
 800216c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <MX_TIM2_Init+0xa0>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <MX_TIM2_Init+0xa0>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800217a:	4816      	ldr	r0, [pc, #88]	; (80021d4 <MX_TIM2_Init+0xa0>)
 800217c:	f002 ff5c 	bl	8005038 <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002186:	f000 f9e5 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4619      	mov	r1, r3
 8002196:	480f      	ldr	r0, [pc, #60]	; (80021d4 <MX_TIM2_Init+0xa0>)
 8002198:	f003 f8f4 	bl	8005384 <HAL_TIM_ConfigClockSource>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021a2:	f000 f9d7 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ae:	463b      	mov	r3, r7
 80021b0:	4619      	mov	r1, r3
 80021b2:	4808      	ldr	r0, [pc, #32]	; (80021d4 <MX_TIM2_Init+0xa0>)
 80021b4:	f003 fae0 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021be:	f000 f9c9 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_SR_UIF);
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <MX_TIM2_Init+0xa0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0201 	mvn.w	r2, #1
 80021ca:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000035c 	.word	0x2000035c

080021d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	463b      	mov	r3, r7
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <MX_TIM3_Init+0x9c>)
 80021f6:	4a20      	ldr	r2, [pc, #128]	; (8002278 <MX_TIM3_Init+0xa0>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <MX_TIM3_Init+0x9c>)
 80021fc:	2263      	movs	r2, #99	; 0x63
 80021fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800220c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800221a:	4816      	ldr	r0, [pc, #88]	; (8002274 <MX_TIM3_Init+0x9c>)
 800221c:	f002 ff0c 	bl	8005038 <HAL_TIM_Base_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002226:	f000 f995 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	4619      	mov	r1, r3
 8002236:	480f      	ldr	r0, [pc, #60]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002238:	f003 f8a4 	bl	8005384 <HAL_TIM_ConfigClockSource>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002242:	f000 f987 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	4619      	mov	r1, r3
 8002252:	4808      	ldr	r0, [pc, #32]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002254:	f003 fa90 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800225e:	f000 f979 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim3,TIM_SR_UIF);
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <MX_TIM3_Init+0x9c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0201 	mvn.w	r2, #1
 800226a:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200001d4 	.word	0x200001d4
 8002278:	40000400 	.word	0x40000400

0800227c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <MX_TIM4_Init+0xa0>)
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <MX_TIM4_Init+0xa4>)
 800229c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_TIM4_Init+0xa0>)
 80022a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80022a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_TIM4_Init+0xa0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7500-1;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_TIM4_Init+0xa0>)
 80022ae:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80022b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_TIM4_Init+0xa0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_TIM4_Init+0xa0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022c0:	4816      	ldr	r0, [pc, #88]	; (800231c <MX_TIM4_Init+0xa0>)
 80022c2:	f002 feb9 	bl	8005038 <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80022cc:	f000 f942 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4619      	mov	r1, r3
 80022dc:	480f      	ldr	r0, [pc, #60]	; (800231c <MX_TIM4_Init+0xa0>)
 80022de:	f003 f851 	bl	8005384 <HAL_TIM_ConfigClockSource>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80022e8:	f000 f934 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022f4:	463b      	mov	r3, r7
 80022f6:	4619      	mov	r1, r3
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <MX_TIM4_Init+0xa0>)
 80022fa:	f003 fa3d 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002304:	f000 f926 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim4,TIM_SR_UIF);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <MX_TIM4_Init+0xa0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0201 	mvn.w	r2, #1
 8002310:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM4_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000140 	.word	0x20000140
 8002320:	40000800 	.word	0x40000800

08002324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_USART1_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800235c:	f003 fa8e 	bl	800587c <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f000 f8f5 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200002d4 	.word	0x200002d4
 8002374:	40011000 	.word	0x40011000

08002378 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_DMA_Init+0x4c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <MX_DMA_Init+0x4c>)
 8002388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_DMA_Init+0x4c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	203a      	movs	r0, #58	; 0x3a
 80023a0:	f000 fccd 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023a4:	203a      	movs	r0, #58	; 0x3a
 80023a6:	f000 fce6 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2046      	movs	r0, #70	; 0x46
 80023b0:	f000 fcc5 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80023b4:	2046      	movs	r0, #70	; 0x46
 80023b6:	f000 fcde 	bl	8002d76 <HAL_NVIC_EnableIRQ>

}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <MX_GPIO_Init+0x178>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a56      	ldr	r2, [pc, #344]	; (8002540 <MX_GPIO_Init+0x178>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <MX_GPIO_Init+0x178>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <MX_GPIO_Init+0x178>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <MX_GPIO_Init+0x178>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <MX_GPIO_Init+0x178>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <MX_GPIO_Init+0x178>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a48      	ldr	r2, [pc, #288]	; (8002540 <MX_GPIO_Init+0x178>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <MX_GPIO_Init+0x178>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RightSensorTrg_Pin|Temp_Sensor_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	210a      	movs	r1, #10
 8002436:	4843      	ldr	r0, [pc, #268]	; (8002544 <MX_GPIO_Init+0x17c>)
 8002438:	f001 f9e2 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LeftSensorTrg_Pin|CenterSensorTrg_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	2111      	movs	r1, #17
 8002440:	4841      	ldr	r0, [pc, #260]	; (8002548 <MX_GPIO_Init+0x180>)
 8002442:	f001 f9dd 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LeftMotor1_Pin|LeftMotor2_Pin|RightMotor2_Pin|RightMotor1_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	f24c 0106 	movw	r1, #49158	; 0xc006
 800244c:	483f      	ldr	r0, [pc, #252]	; (800254c <MX_GPIO_Init+0x184>)
 800244e:	f001 f9d7 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RightSensorEcho_Pin */
  GPIO_InitStruct.Pin = RightSensorEcho_Pin;
 8002452:	2301      	movs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RightSensorEcho_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4619      	mov	r1, r3
 8002464:	4837      	ldr	r0, [pc, #220]	; (8002544 <MX_GPIO_Init+0x17c>)
 8002466:	f001 f831 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RightSensorTrg_Pin */
  GPIO_InitStruct.Pin = RightSensorTrg_Pin;
 800246a:	2302      	movs	r3, #2
 800246c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RightSensorTrg_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	4830      	ldr	r0, [pc, #192]	; (8002544 <MX_GPIO_Init+0x17c>)
 8002482:	f001 f823 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Sensor_Pin */
  GPIO_InitStruct.Pin = Temp_Sensor_Pin;
 8002486:	2308      	movs	r3, #8
 8002488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Temp_Sensor_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4619      	mov	r1, r3
 800249c:	4829      	ldr	r0, [pc, #164]	; (8002544 <MX_GPIO_Init+0x17c>)
 800249e:	f001 f815 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftSensorTrg_Pin CenterSensorTrg_Pin */
  GPIO_InitStruct.Pin = LeftSensorTrg_Pin|CenterSensorTrg_Pin;
 80024a2:	2311      	movs	r3, #17
 80024a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	4619      	mov	r1, r3
 80024b8:	4823      	ldr	r0, [pc, #140]	; (8002548 <MX_GPIO_Init+0x180>)
 80024ba:	f001 f807 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftSensorEcho_Pin */
  GPIO_InitStruct.Pin = LeftSensorEcho_Pin;
 80024be:	2302      	movs	r3, #2
 80024c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LeftSensorEcho_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4619      	mov	r1, r3
 80024d0:	481d      	ldr	r0, [pc, #116]	; (8002548 <MX_GPIO_Init+0x180>)
 80024d2:	f000 fffb 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CenterSensorEcho_Pin */
  GPIO_InitStruct.Pin = CenterSensorEcho_Pin;
 80024d6:	2301      	movs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CenterSensorEcho_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	4619      	mov	r1, r3
 80024e8:	4818      	ldr	r0, [pc, #96]	; (800254c <MX_GPIO_Init+0x184>)
 80024ea:	f000 ffef 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftMotor1_Pin LeftMotor2_Pin RightMotor2_Pin RightMotor1_Pin */
  GPIO_InitStruct.Pin = LeftMotor1_Pin|LeftMotor2_Pin|RightMotor2_Pin|RightMotor1_Pin;
 80024ee:	f24c 0306 	movw	r3, #49158	; 0xc006
 80024f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	4619      	mov	r1, r3
 8002506:	4811      	ldr	r0, [pc, #68]	; (800254c <MX_GPIO_Init+0x184>)
 8002508:	f000 ffe0 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Flame_Sensor_Pin */
  GPIO_InitStruct.Pin = Flame_Sensor_Pin;
 800250c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_GPIO_Init+0x188>)
 8002514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Flame_Sensor_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4619      	mov	r1, r3
 8002520:	4808      	ldr	r0, [pc, #32]	; (8002544 <MX_GPIO_Init+0x17c>)
 8002522:	f000 ffd3 	bl	80034cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2028      	movs	r0, #40	; 0x28
 800252c:	f000 fc07 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002530:	2028      	movs	r0, #40	; 0x28
 8002532:	f000 fc20 	bl	8002d76 <HAL_NVIC_EnableIRQ>

}
 8002536:	bf00      	nop
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40020800 	.word	0x40020800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	10310000 	.word	0x10310000

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_MspInit+0x4c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_MspInit+0x4c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025a2:	2007      	movs	r0, #7
 80025a4:	f000 fbc0 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_I2C_MspInit+0x84>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d12b      	bne.n	800262e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_I2C_MspInit+0x88>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_I2C_MspInit+0x88>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_I2C_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Compass_Pin|I2C1_SDA_Compass_Pin;
 80025f2:	23c0      	movs	r3, #192	; 0xc0
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f6:	2312      	movs	r3, #18
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002602:	2304      	movs	r3, #4
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <HAL_I2C_MspInit+0x8c>)
 800260e:	f000 ff5d 	bl	80034cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_I2C_MspInit+0x88>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_I2C_MspInit+0x88>)
 800261c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_I2C_MspInit+0x88>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40005400 	.word	0x40005400
 800263c:	40023800 	.word	0x40023800
 8002640:	40020400 	.word	0x40020400

08002644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_TIM_Base_MspInit+0xe0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d116      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a32      	ldr	r2, [pc, #200]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2019      	movs	r0, #25
 8002678:	f000 fb61 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800267c:	2019      	movs	r0, #25
 800267e:	f000 fb7a 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002682:	e04a      	b.n	800271a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268c:	d116      	bne.n	80026bc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	201c      	movs	r0, #28
 80026b0:	f000 fb45 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026b4:	201c      	movs	r0, #28
 80026b6:	f000 fb5e 	bl	8002d76 <HAL_NVIC_EnableIRQ>
}
 80026ba:	e02e      	b.n	800271a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_TIM_Base_MspInit+0xe8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	e01a      	b.n	800271a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_TIM_Base_MspInit+0xec>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d115      	bne.n	800271a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_TIM_Base_MspInit+0xe4>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	201e      	movs	r0, #30
 8002710:	f000 fb15 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002714:	201e      	movs	r0, #30
 8002716:	f000 fb2e 	bl	8002d76 <HAL_NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000
 8002728:	40023800 	.word	0x40023800
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800

08002734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_UART_MspInit+0x154>)
 8002752:	4293      	cmp	r3, r2
 8002754:	f040 8094 	bne.w	8002880 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_UART_MspInit+0x158>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	4a4a      	ldr	r2, [pc, #296]	; (800288c <HAL_UART_MspInit+0x158>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	6453      	str	r3, [r2, #68]	; 0x44
 8002768:	4b48      	ldr	r3, [pc, #288]	; (800288c <HAL_UART_MspInit+0x158>)
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	4b44      	ldr	r3, [pc, #272]	; (800288c <HAL_UART_MspInit+0x158>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	4a43      	ldr	r2, [pc, #268]	; (800288c <HAL_UART_MspInit+0x158>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6313      	str	r3, [r2, #48]	; 0x30
 8002784:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_UART_MspInit+0x158>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_TX_BLT_Pin|USART1_RX_BLT_Pin;
 8002790:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a2:	2307      	movs	r3, #7
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4838      	ldr	r0, [pc, #224]	; (8002890 <HAL_UART_MspInit+0x15c>)
 80027ae:	f000 fe8d 	bl	80034cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_UART_MspInit+0x164>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027f6:	4827      	ldr	r0, [pc, #156]	; (8002894 <HAL_UART_MspInit+0x160>)
 80027f8:	f000 fad8 	bl	8002dac <HAL_DMA_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002802:	f7ff fea7 	bl	8002554 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <HAL_UART_MspInit+0x160>)
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_UART_MspInit+0x160>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_UART_MspInit+0x168>)
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_UART_MspInit+0x16c>)
 8002816:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_UART_MspInit+0x168>)
 800281a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_UART_MspInit+0x168>)
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_UART_MspInit+0x168>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_UART_MspInit+0x168>)
 800282e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002832:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_UART_MspInit+0x168>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_UART_MspInit+0x168>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_UART_MspInit+0x168>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_UART_MspInit+0x168>)
 8002848:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800284c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_UART_MspInit+0x168>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002854:	4811      	ldr	r0, [pc, #68]	; (800289c <HAL_UART_MspInit+0x168>)
 8002856:	f000 faa9 	bl	8002dac <HAL_DMA_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002860:	f7ff fe78 	bl	8002554 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <HAL_UART_MspInit+0x168>)
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_UART_MspInit+0x168>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	2025      	movs	r0, #37	; 0x25
 8002876:	f000 fa62 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800287a:	2025      	movs	r0, #37	; 0x25
 800287c:	f000 fa7b 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40011000 	.word	0x40011000
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000
 8002894:	20000274 	.word	0x20000274
 8002898:	40026440 	.word	0x40026440
 800289c:	20000214 	.word	0x20000214
 80028a0:	400264b8 	.word	0x400264b8

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <HardFault_Handler+0x4>

080028b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <MemManage_Handler+0x4>

080028be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <UsageFault_Handler+0x4>

080028ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f8:	f000 f904 	bl	8002b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002906:	f002 fc35 	bl	8005174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000318 	.word	0x20000318

08002914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM2_IRQHandler+0x10>)
 800291a:	f002 fc2b 	bl	8005174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000035c 	.word	0x2000035c

08002928 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM4_IRQHandler+0x10>)
 800292e:	f002 fc21 	bl	8005174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000140 	.word	0x20000140

0800293c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <USART1_IRQHandler+0x10>)
 8002942:	f003 f96d 	bl	8005c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200002d4 	.word	0x200002d4

08002950 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002954:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002958:	f000 ff6c 	bl	8003834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <DMA2_Stream2_IRQHandler+0x10>)
 8002966:	f000 fb49 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000274 	.word	0x20000274

08002974 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <DMA2_Stream7_IRQHandler+0x10>)
 800297a:	f000 fb3f 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000214 	.word	0x20000214

08002988 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x50>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <_sbrk+0x16>
		heap_end = &end;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <_sbrk+0x50>)
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <_sbrk+0x54>)
 800299c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <_sbrk+0x50>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <_sbrk+0x50>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	466a      	mov	r2, sp
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d907      	bls.n	80029c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029b2:	f004 f81d 	bl	80069f0 <__errno>
 80029b6:	4602      	mov	r2, r0
 80029b8:	230c      	movs	r3, #12
 80029ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e006      	b.n	80029d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <_sbrk+0x50>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <_sbrk+0x50>)
 80029cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000012c 	.word	0x2000012c
 80029dc:	200003a8 	.word	0x200003a8

080029e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <SystemInit+0x28>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <SystemInit+0x28>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SystemInit+0x28>)
 80029f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fa:	609a      	str	r2, [r3, #8]
#endif
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a12:	e003      	b.n	8002a1c <LoopCopyDataInit>

08002a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a1a:	3104      	adds	r1, #4

08002a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a24:	d3f6      	bcc.n	8002a14 <CopyDataInit>
  ldr  r2, =_sbss
 8002a26:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a28:	e002      	b.n	8002a30 <LoopFillZerobss>

08002a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a2c:	f842 3b04 	str.w	r3, [r2], #4

08002a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a34:	d3f9      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a36:	f7ff ffd3 	bl	80029e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f003 ffdf 	bl	80069fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3e:	f7ff f947 	bl	8001cd0 <main>
  bx  lr    
 8002a42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a48:	080070f8 	.word	0x080070f8
  ldr  r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a50:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002a54:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002a58:	200003a4 	.word	0x200003a4

08002a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC_IRQHandler>
	...

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <HAL_Init+0x40>)
 8002a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_Init+0x40>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_Init+0x40>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f000 f94d 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 f808 	bl	8002aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a94:	f7ff fd66 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_InitTick+0x54>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x58>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f965 	bl	8002d92 <HAL_SYSTICK_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00e      	b.n	8002af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d80a      	bhi.n	8002aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f000 f92d 	bl	8002d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <HAL_InitTick+0x5c>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000008 	.word	0x20000008
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_IncTick+0x20>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_IncTick+0x24>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_IncTick+0x24>)
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000008 	.word	0x20000008
 8002b28:	2000039c 	.word	0x2000039c

08002b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_GetTick+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	2000039c 	.word	0x2000039c

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff ffee 	bl	8002b2c <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d005      	beq.n	8002b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_Delay+0x40>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6a:	bf00      	nop
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f7      	bhi.n	8002b6c <HAL_Delay+0x28>
  {
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000008 	.word	0x20000008

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf4:	d301      	bcc.n	8002cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <SysTick_Config+0x40>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d02:	210f      	movs	r1, #15
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f7ff ff8e 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <SysTick_Config+0x40>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <SysTick_Config+0x40>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff29 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d50:	f7ff ff3e 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f7ff ff8e 	bl	8002c7c <NVIC_EncodePriority>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff5d 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff31 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffa2 	bl	8002ce4 <SysTick_Config>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff feb8 	bl	8002b2c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e099      	b.n	8002efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de8:	e00f      	b.n	8002e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dea:	f7ff fe9f 	bl	8002b2c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d908      	bls.n	8002e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e078      	b.n	8002efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e8      	bne.n	8002dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_DMA_Init+0x158>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0307 	bic.w	r3, r3, #7
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d117      	bne.n	8002ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa91 	bl	80033d8 <DMA_CheckFifoParam>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e016      	b.n	8002efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa48 	bl	800336c <DMA_CalcBaseAndBitshift>
 8002edc:	4603      	mov	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	223f      	movs	r2, #63	; 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	f010803f 	.word	0xf010803f

08002f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Start_IT+0x26>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e040      	b.n	8002fb0 <HAL_DMA_Start_IT+0xa8>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d12f      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f9da 	bl	8003310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	223f      	movs	r2, #63	; 0x3f
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0216 	orr.w	r2, r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00c      	b.n	8002ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003008:	4b92      	ldr	r3, [pc, #584]	; (8003254 <HAL_DMA_IRQHandler+0x258>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a92      	ldr	r2, [pc, #584]	; (8003258 <HAL_DMA_IRQHandler+0x25c>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2208      	movs	r2, #8
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	2208      	movs	r2, #8
 8003056:	409a      	lsls	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	2201      	movs	r2, #1
 800308c:	409a      	lsls	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2204      	movs	r2, #4
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	2210      	movs	r2, #16
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d043      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03c      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2210      	movs	r2, #16
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d024      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e01f      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e016      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0208 	bic.w	r2, r2, #8
 800315a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	2220      	movs	r2, #32
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808e 	beq.w	800329a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8086 	beq.w	800329a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	2220      	movs	r2, #32
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d136      	bne.n	8003214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0216 	bic.w	r2, r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x1da>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	223f      	movs	r2, #63	; 0x3f
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d07d      	beq.n	8003306 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
        }
        return;
 8003212:	e078      	b.n	8003306 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01c      	beq.n	800325c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	2b00      	cmp	r3, #0
 8003236:	d030      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e02b      	b.n	800329a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d027      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e022      	b.n	800329a <HAL_DMA_IRQHandler+0x29e>
 8003254:	20000000 	.word	0x20000000
 8003258:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0210 	bic.w	r2, r2, #16
 8003278:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d032      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2205      	movs	r2, #5
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d307      	bcc.n	80032e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_DMA_IRQHandler+0x2ca>
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
 8003304:	e000      	b.n	8003308 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003306:	bf00      	nop
    }
  }
}
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop

08003310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800332c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d108      	bne.n	8003350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800334e:	e007      	b.n	8003360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3b10      	subs	r3, #16
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <DMA_CalcBaseAndBitshift+0x64>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003386:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d909      	bls.n	80033ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	; 0x58
 80033ac:	e007      	b.n	80033be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	aaaaaaab 	.word	0xaaaaaaab
 80033d4:	080070a0 	.word	0x080070a0

080033d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11f      	bne.n	8003432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d855      	bhi.n	80034a4 <DMA_CheckFifoParam+0xcc>
 80033f8:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <DMA_CheckFifoParam+0x28>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003411 	.word	0x08003411
 8003404:	08003423 	.word	0x08003423
 8003408:	08003411 	.word	0x08003411
 800340c:	080034a5 	.word	0x080034a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d045      	beq.n	80034a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e042      	b.n	80034a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800342a:	d13f      	bne.n	80034ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e03c      	b.n	80034ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343a:	d121      	bne.n	8003480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d836      	bhi.n	80034b0 <DMA_CheckFifoParam+0xd8>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <DMA_CheckFifoParam+0x70>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003459 	.word	0x08003459
 800344c:	0800345f 	.word	0x0800345f
 8003450:	08003459 	.word	0x08003459
 8003454:	08003471 	.word	0x08003471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e02f      	b.n	80034be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d024      	beq.n	80034b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346e:	e021      	b.n	80034b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003478:	d11e      	bne.n	80034b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800347e:	e01b      	b.n	80034b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d902      	bls.n	800348c <DMA_CheckFifoParam+0xb4>
 8003486:	2b03      	cmp	r3, #3
 8003488:	d003      	beq.n	8003492 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800348a:	e018      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e015      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      break;
 80034a2:	e00b      	b.n	80034bc <DMA_CheckFifoParam+0xe4>
      break;
 80034a4:	bf00      	nop
 80034a6:	e00a      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034a8:	bf00      	nop
 80034aa:	e008      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034ac:	bf00      	nop
 80034ae:	e006      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034b0:	bf00      	nop
 80034b2:	e004      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034b4:	bf00      	nop
 80034b6:	e002      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;   
 80034b8:	bf00      	nop
 80034ba:	e000      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034bc:	bf00      	nop
    }
  } 
  
  return status; 
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	e159      	b.n	800379c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	f040 8148 	bne.w	8003796 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d00b      	beq.n	8003526 <HAL_GPIO_Init+0x5a>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800351a:	2b11      	cmp	r3, #17
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b12      	cmp	r3, #18
 8003524:	d130      	bne.n	8003588 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0xfc>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b12      	cmp	r3, #18
 80035c6:	d123      	bne.n	8003610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	08da      	lsrs	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3208      	adds	r2, #8
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	220f      	movs	r2, #15
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	08da      	lsrs	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3208      	adds	r2, #8
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	2203      	movs	r2, #3
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0203 	and.w	r2, r3, #3
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a2 	beq.w	8003796 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <HAL_GPIO_Init+0x2e4>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	4a55      	ldr	r2, [pc, #340]	; (80037b0 <HAL_GPIO_Init+0x2e4>)
 800365c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003660:	6453      	str	r3, [r2, #68]	; 0x44
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_GPIO_Init+0x2e4>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800366e:	4a51      	ldr	r2, [pc, #324]	; (80037b4 <HAL_GPIO_Init+0x2e8>)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	3302      	adds	r3, #2
 8003676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a48      	ldr	r2, [pc, #288]	; (80037b8 <HAL_GPIO_Init+0x2ec>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d019      	beq.n	80036ce <HAL_GPIO_Init+0x202>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a47      	ldr	r2, [pc, #284]	; (80037bc <HAL_GPIO_Init+0x2f0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0x1fe>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a46      	ldr	r2, [pc, #280]	; (80037c0 <HAL_GPIO_Init+0x2f4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_GPIO_Init+0x1fa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a45      	ldr	r2, [pc, #276]	; (80037c4 <HAL_GPIO_Init+0x2f8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <HAL_GPIO_Init+0x1f6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a44      	ldr	r2, [pc, #272]	; (80037c8 <HAL_GPIO_Init+0x2fc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_GPIO_Init+0x1f2>
 80036ba:	2304      	movs	r3, #4
 80036bc:	e008      	b.n	80036d0 <HAL_GPIO_Init+0x204>
 80036be:	2307      	movs	r3, #7
 80036c0:	e006      	b.n	80036d0 <HAL_GPIO_Init+0x204>
 80036c2:	2303      	movs	r3, #3
 80036c4:	e004      	b.n	80036d0 <HAL_GPIO_Init+0x204>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e002      	b.n	80036d0 <HAL_GPIO_Init+0x204>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_GPIO_Init+0x204>
 80036ce:	2300      	movs	r3, #0
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	f002 0203 	and.w	r2, r2, #3
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	4093      	lsls	r3, r2
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e0:	4934      	ldr	r1, [pc, #208]	; (80037b4 <HAL_GPIO_Init+0x2e8>)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	3302      	adds	r3, #2
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ee:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_GPIO_Init+0x300>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003712:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <HAL_GPIO_Init+0x300>)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003718:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_GPIO_Init+0x300>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_GPIO_Init+0x300>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <HAL_GPIO_Init+0x300>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_GPIO_Init+0x300>)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_GPIO_Init+0x300>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_GPIO_Init+0x300>)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3301      	adds	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b0f      	cmp	r3, #15
 80037a0:	f67f aea2 	bls.w	80034e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a4:	bf00      	nop
 80037a6:	3724      	adds	r7, #36	; 0x24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40013800 	.word	0x40013800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40020400 	.word	0x40020400
 80037c0:	40020800 	.word	0x40020800
 80037c4:	40020c00 	.word	0x40020c00
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e001      	b.n	80037f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800381c:	e003      	b.n	8003826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	041a      	lsls	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	619a      	str	r2, [r3, #24]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800384a:	4a05      	ldr	r2, [pc, #20]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fa10 	bl	8001c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e11f      	b.n	8003ab6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe fe92 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c8:	f001 fb8e 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 80038cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a7b      	ldr	r2, [pc, #492]	; (8003ac0 <HAL_I2C_Init+0x25c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d807      	bhi.n	80038e8 <HAL_I2C_Init+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a7a      	ldr	r2, [pc, #488]	; (8003ac4 <HAL_I2C_Init+0x260>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	bf94      	ite	ls
 80038e0:	2301      	movls	r3, #1
 80038e2:	2300      	movhi	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e006      	b.n	80038f6 <HAL_I2C_Init+0x92>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <HAL_I2C_Init+0x264>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bf94      	ite	ls
 80038f0:	2301      	movls	r3, #1
 80038f2:	2300      	movhi	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0db      	b.n	8003ab6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a72      	ldr	r2, [pc, #456]	; (8003acc <HAL_I2C_Init+0x268>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0c9b      	lsrs	r3, r3, #18
 8003908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a64      	ldr	r2, [pc, #400]	; (8003ac0 <HAL_I2C_Init+0x25c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d802      	bhi.n	8003938 <HAL_I2C_Init+0xd4>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	e009      	b.n	800394c <HAL_I2C_Init+0xe8>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a63      	ldr	r2, [pc, #396]	; (8003ad0 <HAL_I2C_Init+0x26c>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	3301      	adds	r3, #1
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800395e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4956      	ldr	r1, [pc, #344]	; (8003ac0 <HAL_I2C_Init+0x25c>)
 8003968:	428b      	cmp	r3, r1
 800396a:	d80d      	bhi.n	8003988 <HAL_I2C_Init+0x124>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e59      	subs	r1, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fbb1 f3f3 	udiv	r3, r1, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	2b04      	cmp	r3, #4
 8003982:	bf38      	it	cc
 8003984:	2304      	movcc	r3, #4
 8003986:	e04f      	b.n	8003a28 <HAL_I2C_Init+0x1c4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <HAL_I2C_Init+0x150>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e012      	b.n	80039da <HAL_I2C_Init+0x176>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Init+0x17e>
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_I2C_Init+0x1c4>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10e      	bne.n	8003a08 <HAL_I2C_Init+0x1a4>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e58      	subs	r0, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	440b      	add	r3, r1
 80039f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a06:	e00f      	b.n	8003a28 <HAL_I2C_Init+0x1c4>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6911      	ldr	r1, [r2, #16]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	000186a0 	.word	0x000186a0
 8003ac4:	001e847f 	.word	0x001e847f
 8003ac8:	003d08ff 	.word	0x003d08ff
 8003acc:	431bde83 	.word	0x431bde83
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7ff f820 	bl	8002b2c <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	f040 80e0 	bne.w	8003cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2319      	movs	r3, #25
 8003b02:	2201      	movs	r2, #1
 8003b04:	4970      	ldr	r1, [pc, #448]	; (8003cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fc56 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0d3      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2C_Master_Transmit+0x50>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0cc      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d007      	beq.n	8003b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	; 0x21
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2210      	movs	r2, #16
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	893a      	ldrh	r2, [r7, #8]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a50      	ldr	r2, [pc, #320]	; (8003ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fac2 	bl	800411c <I2C_MasterRequestWrite>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e08d      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb8:	e066      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fcd0 	bl	8004564 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06b      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <HAL_I2C_Master_Transmit+0x188>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6a39      	ldr	r1, [r7, #32]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fcc0 	bl	80045e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d107      	bne.n	8003c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01a      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d194      	bne.n	8003bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000

08003cd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7fe ff22 	bl	8002b2c <HAL_GetTick>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 820b 	bne.w	800410e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2319      	movs	r3, #25
 8003cfe:	2201      	movs	r2, #1
 8003d00:	497c      	ldr	r1, [pc, #496]	; (8003ef4 <HAL_I2C_Master_Receive+0x224>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fb58 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e1fe      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2C_Master_Receive+0x50>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e1f7      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d007      	beq.n	8003d46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2222      	movs	r2, #34	; 0x22
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2210      	movs	r2, #16
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	893a      	ldrh	r2, [r7, #8]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4a5c      	ldr	r2, [pc, #368]	; (8003ef8 <HAL_I2C_Master_Receive+0x228>)
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d88:	8979      	ldrh	r1, [r7, #10]
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa46 	bl	8004220 <I2C_MasterRequestRead>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1b8      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d113      	bne.n	8003dce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	2300      	movs	r3, #0
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e18c      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d11b      	bne.n	8003e0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e16c      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d11b      	bne.n	8003e4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	e14c      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e74:	e138      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 80f1 	bhi.w	8004062 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d123      	bne.n	8003ed0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fbeb 	bl	8004668 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e139      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ece:	e10b      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d14e      	bne.n	8003f76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4906      	ldr	r1, [pc, #24]	; (8003efc <HAL_I2C_Master_Receive+0x22c>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa68 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e10e      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
 8003ef2:	bf00      	nop
 8003ef4:	00100002 	.word	0x00100002
 8003ef8:	ffff0000 	.word	0xffff0000
 8003efc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f74:	e0b8      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4966      	ldr	r1, [pc, #408]	; (8004118 <HAL_I2C_Master_Receive+0x448>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fa19 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0bf      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	494f      	ldr	r1, [pc, #316]	; (8004118 <HAL_I2C_Master_Receive+0x448>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f9eb 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e091      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004060:	e042      	b.n	80040e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fafe 	bl	8004668 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e04c      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d118      	bne.n	80040e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f aec2 	bne.w	8003e76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	; 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	00010004 	.word	0x00010004

0800411c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	460b      	mov	r3, r1
 800412a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d006      	beq.n	8004146 <I2C_MasterRequestWrite+0x2a>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d003      	beq.n	8004146 <I2C_MasterRequestWrite+0x2a>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004144:	d108      	bne.n	8004158 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e00b      	b.n	8004170 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	2b12      	cmp	r3, #18
 800415e:	d107      	bne.n	8004170 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f91b 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00c      	beq.n	80041a2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e035      	b.n	800420e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041aa:	d108      	bne.n	80041be <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ac:	897b      	ldrh	r3, [r7, #10]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041ba:	611a      	str	r2, [r3, #16]
 80041bc:	e01b      	b.n	80041f6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041be:	897b      	ldrh	r3, [r7, #10]
 80041c0:	11db      	asrs	r3, r3, #7
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0306 	and.w	r3, r3, #6
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f063 030f 	orn	r3, r3, #15
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	490f      	ldr	r1, [pc, #60]	; (8004218 <I2C_MasterRequestWrite+0xfc>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f942 	bl	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e010      	b.n	800420e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4908      	ldr	r1, [pc, #32]	; (800421c <I2C_MasterRequestWrite+0x100>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f932 	bl	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	00010008 	.word	0x00010008
 800421c:	00010002 	.word	0x00010002

08004220 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	460b      	mov	r3, r1
 800422e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d006      	beq.n	800425a <I2C_MasterRequestRead+0x3a>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d003      	beq.n	800425a <I2C_MasterRequestRead+0x3a>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004258:	d108      	bne.n	800426c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e00b      	b.n	8004284 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	2b11      	cmp	r3, #17
 8004272:	d107      	bne.n	8004284 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004282:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f891 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e078      	b.n	80043a8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042be:	d108      	bne.n	80042d2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042c0:	897b      	ldrh	r3, [r7, #10]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]
 80042d0:	e05e      	b.n	8004390 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d2:	897b      	ldrh	r3, [r7, #10]
 80042d4:	11db      	asrs	r3, r3, #7
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0306 	and.w	r3, r3, #6
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f063 030f 	orn	r3, r3, #15
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4930      	ldr	r1, [pc, #192]	; (80043b0 <I2C_MasterRequestRead+0x190>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f8b8 	bl	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e053      	b.n	80043a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004300:	897b      	ldrh	r3, [r7, #10]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4929      	ldr	r1, [pc, #164]	; (80043b4 <I2C_MasterRequestRead+0x194>)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f8a8 	bl	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e043      	b.n	80043a8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f830 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00c      	beq.n	8004378 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e017      	b.n	80043a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004378:	897b      	ldrh	r3, [r7, #10]
 800437a:	11db      	asrs	r3, r3, #7
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0306 	and.w	r3, r3, #6
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f063 030e 	orn	r3, r3, #14
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4907      	ldr	r1, [pc, #28]	; (80043b4 <I2C_MasterRequestRead+0x194>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f865 	bl	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010008 	.word	0x00010008
 80043b4:	00010002 	.word	0x00010002

080043b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c8:	e025      	b.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d021      	beq.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fe fbab 	bl	8002b2c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0220 	orr.w	r2, r3, #32
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e023      	b.n	800445e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10d      	bne.n	800443c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	e00c      	b.n	8004456 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	429a      	cmp	r2, r3
 800445a:	d0b6      	beq.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004474:	e051      	b.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004484:	d123      	bne.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800449e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e046      	b.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d021      	beq.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d6:	f7fe fb29 	bl	8002b2c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d302      	bcc.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d116      	bne.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e020      	b.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10c      	bne.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e00b      	b.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	43da      	mvns	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4013      	ands	r3, r2
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d18d      	bne.n	8004476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004570:	e02d      	b.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f8ce 	bl	8004714 <I2C_IsAcknowledgeFailed>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e02d      	b.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d021      	beq.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fe facf 	bl	8002b2c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d116      	bne.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e007      	b.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d1ca      	bne.n	8004572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f2:	e02d      	b.n	8004650 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f88d 	bl	8004714 <I2C_IsAcknowledgeFailed>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e02d      	b.n	8004660 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d021      	beq.n	8004650 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460c:	f7fe fa8e 	bl	8002b2c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e007      	b.n	8004660 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d1ca      	bne.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004674:	e042      	b.n	80046fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b10      	cmp	r3, #16
 8004682:	d119      	bne.n	80046b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0210 	mvn.w	r2, #16
 800468c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e029      	b.n	800470c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b8:	f7fe fa38 	bl	8002b2c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d116      	bne.n	80046fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e007      	b.n	800470c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d1b5      	bne.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472a:	d11b      	bne.n	8004764 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004734:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e25b      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d075      	beq.n	800487e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004792:	4ba3      	ldr	r3, [pc, #652]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b04      	cmp	r3, #4
 800479c:	d00c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479e:	4ba0      	ldr	r3, [pc, #640]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d112      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047aa:	4b9d      	ldr	r3, [pc, #628]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b6:	d10b      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b8:	4b99      	ldr	r3, [pc, #612]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d05b      	beq.n	800487c <HAL_RCC_OscConfig+0x108>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d157      	bne.n	800487c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e236      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d8:	d106      	bne.n	80047e8 <HAL_RCC_OscConfig+0x74>
 80047da:	4b91      	ldr	r3, [pc, #580]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a90      	ldr	r2, [pc, #576]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e01d      	b.n	8004824 <HAL_RCC_OscConfig+0xb0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f0:	d10c      	bne.n	800480c <HAL_RCC_OscConfig+0x98>
 80047f2:	4b8b      	ldr	r3, [pc, #556]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a8a      	ldr	r2, [pc, #552]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b88      	ldr	r3, [pc, #544]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a87      	ldr	r2, [pc, #540]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e00b      	b.n	8004824 <HAL_RCC_OscConfig+0xb0>
 800480c:	4b84      	ldr	r3, [pc, #528]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a83      	ldr	r2, [pc, #524]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a80      	ldr	r2, [pc, #512]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800481e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe f97e 	bl	8002b2c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe f97a 	bl	8002b2c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e1fb      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0xc0>
 8004852:	e014      	b.n	800487e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fe f96a 	bl	8002b2c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800485c:	f7fe f966 	bl	8002b2c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1e7      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0xe8>
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d063      	beq.n	8004952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004896:	4b62      	ldr	r3, [pc, #392]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d11c      	bne.n	80048dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b5f      	ldr	r3, [pc, #380]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_OscConfig+0x152>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e1bb      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4952      	ldr	r1, [pc, #328]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048da:	e03a      	b.n	8004952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d020      	beq.n	8004926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e4:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCC_OscConfig+0x2b0>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fe f91f 	bl	8002b2c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fe f91b 	bl	8002b2c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e19c      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4940      	ldr	r1, [pc, #256]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x2b0>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fe f8fe 	bl	8002b2c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004934:	f7fe f8fa 	bl	8002b2c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e17b      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d030      	beq.n	80049c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCC_OscConfig+0x2b4>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe f8de 	bl	8002b2c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004974:	f7fe f8da 	bl	8002b2c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e15b      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x200>
 8004992:	e015      	b.n	80049c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004994:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <HAL_RCC_OscConfig+0x2b4>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499a:	f7fe f8c7 	bl	8002b2c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a2:	f7fe f8c3 	bl	8002b2c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e144      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a0 	beq.w	8004b0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ec:	6413      	str	r3, [r2, #64]	; 0x40
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_RCC_OscConfig+0x2b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d121      	bne.n	8004a4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_RCC_OscConfig+0x2b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <HAL_RCC_OscConfig+0x2b8>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a16:	f7fe f889 	bl	8002b2c <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	e011      	b.n	8004a42 <HAL_RCC_OscConfig+0x2ce>
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	42470000 	.word	0x42470000
 8004a28:	42470e80 	.word	0x42470e80
 8004a2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fe f87c 	bl	8002b2c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0fd      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a42:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x4d4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d106      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
 8004a56:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a7c      	ldr	r2, [pc, #496]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
 8004a62:	e01c      	b.n	8004a9e <HAL_RCC_OscConfig+0x32a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x312>
 8004a6c:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a76      	ldr	r2, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	4b74      	ldr	r3, [pc, #464]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a73      	ldr	r2, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	e00b      	b.n	8004a9e <HAL_RCC_OscConfig+0x32a>
 8004a86:	4b71      	ldr	r3, [pc, #452]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a70      	ldr	r2, [pc, #448]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b6e      	ldr	r3, [pc, #440]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a6d      	ldr	r2, [pc, #436]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d015      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f841 	bl	8002b2c <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fe f83d 	bl	8002b2c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0bc      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ee      	beq.n	8004aae <HAL_RCC_OscConfig+0x33a>
 8004ad0:	e014      	b.n	8004afc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fe f82b 	bl	8002b2c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fe f827 	bl	8002b2c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0a6      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	4b56      	ldr	r3, [pc, #344]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b02:	4b52      	ldr	r3, [pc, #328]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4a51      	ldr	r2, [pc, #324]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8092 	beq.w	8004c3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d05c      	beq.n	8004bde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d141      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_RCC_OscConfig+0x4dc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fd fffb 	bl	8002b2c <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd fff7 	bl	8002b2c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e078      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	019b      	lsls	r3, r3, #6
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	3b01      	subs	r3, #1
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	4933      	ldr	r1, [pc, #204]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b82:	4b33      	ldr	r3, [pc, #204]	; (8004c50 <HAL_RCC_OscConfig+0x4dc>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fd ffd0 	bl	8002b2c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fd ffcc 	bl	8002b2c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e04d      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x41c>
 8004bae:	e045      	b.n	8004c3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_RCC_OscConfig+0x4dc>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fd ffb9 	bl	8002b2c <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fd ffb5 	bl	8002b2c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e036      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <HAL_RCC_OscConfig+0x44a>
 8004bdc:	e02e      	b.n	8004c3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e029      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d115      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c12:	4013      	ands	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10d      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	42470060 	.word	0x42470060

08004c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0cc      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c68:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d90c      	bls.n	8004c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b63      	ldr	r3, [pc, #396]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0b8      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca8:	4b59      	ldr	r3, [pc, #356]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a58      	ldr	r2, [pc, #352]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cc0:	4b53      	ldr	r3, [pc, #332]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a52      	ldr	r2, [pc, #328]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ccc:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	494d      	ldr	r1, [pc, #308]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d044      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf2:	4b47      	ldr	r3, [pc, #284]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d119      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e07f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d12:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e06f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d22:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e067      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d32:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 0203 	bic.w	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4934      	ldr	r1, [pc, #208]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d44:	f7fd fef2 	bl	8002b2c <HAL_GetTick>
 8004d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4c:	f7fd feee 	bl	8002b2c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e04f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 020c 	and.w	r2, r3, #12
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d1eb      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d74:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d20c      	bcs.n	8004d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e032      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4916      	ldr	r1, [pc, #88]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	490e      	ldr	r1, [pc, #56]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dda:	f000 f821 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 8004dde:	4601      	mov	r1, r0
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <HAL_RCC_ClockConfig+0x1c0>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	fa21 f303 	lsr.w	r3, r1, r3
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCC_ClockConfig+0x1c8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd fe52 	bl	8002aa4 <HAL_InitTick>

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023c00 	.word	0x40023c00
 8004e10:	40023800 	.word	0x40023800
 8004e14:	08007088 	.word	0x08007088
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	20000004 	.word	0x20000004

08004e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e36:	4b63      	ldr	r3, [pc, #396]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d007      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0x32>
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d008      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0x38>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f040 80b4 	bne.w	8004fb4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e4c:	4b5e      	ldr	r3, [pc, #376]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e4e:	60bb      	str	r3, [r7, #8]
       break;
 8004e50:	e0b3      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e52:	4b5e      	ldr	r3, [pc, #376]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e0b0      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e58:	4b5a      	ldr	r3, [pc, #360]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d04a      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6e:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	f04f 0400 	mov.w	r4, #0
 8004e78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	ea03 0501 	and.w	r5, r3, r1
 8004e84:	ea04 0602 	and.w	r6, r4, r2
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	0154      	lsls	r4, r2, #5
 8004e96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e9a:	014b      	lsls	r3, r1, #5
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	1b49      	subs	r1, r1, r5
 8004ea2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	0194      	lsls	r4, r2, #6
 8004eb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004eb4:	018b      	lsls	r3, r1, #6
 8004eb6:	1a5b      	subs	r3, r3, r1
 8004eb8:	eb64 0402 	sbc.w	r4, r4, r2
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	00e2      	lsls	r2, r4, #3
 8004ec6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004eca:	00d9      	lsls	r1, r3, #3
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4614      	mov	r4, r2
 8004ed0:	195b      	adds	r3, r3, r5
 8004ed2:	eb44 0406 	adc.w	r4, r4, r6
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	0262      	lsls	r2, r4, #9
 8004ee0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ee4:	0259      	lsls	r1, r3, #9
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	4621      	mov	r1, r4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	f7fb fde4 	bl	8000ac4 <__aeabi_uldivmod>
 8004efc:	4603      	mov	r3, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e049      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f04:	4b2f      	ldr	r3, [pc, #188]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	f04f 0400 	mov.w	r4, #0
 8004f0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	ea03 0501 	and.w	r5, r3, r1
 8004f1a:	ea04 0602 	and.w	r6, r4, r2
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4632      	mov	r2, r6
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	f04f 0400 	mov.w	r4, #0
 8004f2a:	0154      	lsls	r4, r2, #5
 8004f2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f30:	014b      	lsls	r3, r1, #5
 8004f32:	4619      	mov	r1, r3
 8004f34:	4622      	mov	r2, r4
 8004f36:	1b49      	subs	r1, r1, r5
 8004f38:	eb62 0206 	sbc.w	r2, r2, r6
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	0194      	lsls	r4, r2, #6
 8004f46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f4a:	018b      	lsls	r3, r1, #6
 8004f4c:	1a5b      	subs	r3, r3, r1
 8004f4e:	eb64 0402 	sbc.w	r4, r4, r2
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f60:	00d9      	lsls	r1, r3, #3
 8004f62:	460b      	mov	r3, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	195b      	adds	r3, r3, r5
 8004f68:	eb44 0406 	adc.w	r4, r4, r6
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	02a2      	lsls	r2, r4, #10
 8004f76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f7a:	0299      	lsls	r1, r3, #10
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4614      	mov	r4, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	4621      	mov	r1, r4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f04f 0400 	mov.w	r4, #0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	f7fb fd99 	bl	8000ac4 <__aeabi_uldivmod>
 8004f92:	4603      	mov	r3, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
      break;
 8004fb2:	e002      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fb6:	60bb      	str	r3, [r7, #8]
      break;
 8004fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fba:	68bb      	ldr	r3, [r7, #8]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	007a1200 	.word	0x007a1200

08004fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000000 	.word	0x20000000

08004fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fec:	f7ff fff0 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0a9b      	lsrs	r3, r3, #10
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4a03      	ldr	r2, [pc, #12]	; (800500c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffe:	5cd3      	ldrb	r3, [r2, r3]
 8005000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	08007098 	.word	0x08007098

08005010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005014:	f7ff ffdc 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8005018:	4601      	mov	r1, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0b5b      	lsrs	r3, r3, #13
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4a03      	ldr	r2, [pc, #12]	; (8005034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005026:	5cd3      	ldrb	r3, [r2, r3]
 8005028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40023800 	.word	0x40023800
 8005034:	08007098 	.word	0x08007098

08005038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e01d      	b.n	8005086 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fd faf0 	bl	8002644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f000 fa64 	bl	8005544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d007      	beq.n	80050c0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d007      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <HAL_TIM_Base_Stop_IT+0x48>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	f240 4344 	movw	r3, #1092	; 0x444
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <HAL_TIM_Base_Stop_IT+0x48>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0202 	mvn.w	r2, #2
 80051a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9a5 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f997 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9a8 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0204 	mvn.w	r2, #4
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f97b 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f96d 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f97e 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b08      	cmp	r3, #8
 8005230:	d122      	bne.n	8005278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d11b      	bne.n	8005278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0208 	mvn.w	r2, #8
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2204      	movs	r2, #4
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f951 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f943 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f954 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b10      	cmp	r3, #16
 8005284:	d122      	bne.n	80052cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d11b      	bne.n	80052cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0210 	mvn.w	r2, #16
 800529c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2208      	movs	r2, #8
 80052a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f927 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f919 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f92a 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d10e      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0201 	mvn.w	r2, #1
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc fc58 	bl	8001ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d10e      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b80      	cmp	r3, #128	; 0x80
 8005312:	d107      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 faa2 	bl	8005868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b40      	cmp	r3, #64	; 0x40
 8005330:	d10e      	bne.n	8005350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8ef 	bl	800552e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b20      	cmp	r3, #32
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0220 	mvn.w	r2, #32
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa6c 	bl	8005854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIM_ConfigClockSource+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e0a6      	b.n	80054ea <HAL_TIM_ConfigClockSource+0x166>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d067      	beq.n	80054a4 <HAL_TIM_ConfigClockSource+0x120>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d80b      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x6c>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d073      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0x140>
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d802      	bhi.n	80053e6 <HAL_TIM_ConfigClockSource+0x62>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d06f      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053e4:	e078      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d06c      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0x140>
 80053ea:	2b30      	cmp	r3, #48	; 0x30
 80053ec:	d06a      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053ee:	e073      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053f0:	2b70      	cmp	r3, #112	; 0x70
 80053f2:	d00d      	beq.n	8005410 <HAL_TIM_ConfigClockSource+0x8c>
 80053f4:	2b70      	cmp	r3, #112	; 0x70
 80053f6:	d804      	bhi.n	8005402 <HAL_TIM_ConfigClockSource+0x7e>
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d033      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0xe0>
 80053fc:	2b60      	cmp	r3, #96	; 0x60
 80053fe:	d041      	beq.n	8005484 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005400:	e06a      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005406:	d066      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x152>
 8005408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540c:	d017      	beq.n	800543e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800540e:	e063      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	6899      	ldr	r1, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f000 f98a 	bl	8005738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005432:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]
      break;
 800543c:	e04c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6899      	ldr	r1, [r3, #8]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f000 f973 	bl	8005738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005460:	609a      	str	r2, [r3, #8]
      break;
 8005462:	e039      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	461a      	mov	r2, r3
 8005472:	f000 f8e7 	bl	8005644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2150      	movs	r1, #80	; 0x50
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f940 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 8005482:	e029      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6859      	ldr	r1, [r3, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	461a      	mov	r2, r3
 8005492:	f000 f906 	bl	80056a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2160      	movs	r1, #96	; 0x60
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f930 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 80054a2:	e019      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	461a      	mov	r2, r3
 80054b2:	f000 f8c7 	bl	8005644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2140      	movs	r1, #64	; 0x40
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f920 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 80054c2:	e009      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 f917 	bl	8005702 <TIM_ITRx_SetConfig>
      break;
 80054d4:	e000      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a34      	ldr	r2, [pc, #208]	; (8005628 <TIM_Base_SetConfig+0xe4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00f      	beq.n	800557c <TIM_Base_SetConfig+0x38>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d00b      	beq.n	800557c <TIM_Base_SetConfig+0x38>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a31      	ldr	r2, [pc, #196]	; (800562c <TIM_Base_SetConfig+0xe8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_Base_SetConfig+0x38>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a30      	ldr	r2, [pc, #192]	; (8005630 <TIM_Base_SetConfig+0xec>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_Base_SetConfig+0x38>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <TIM_Base_SetConfig+0xf0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d108      	bne.n	800558e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <TIM_Base_SetConfig+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01b      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559c:	d017      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a22      	ldr	r2, [pc, #136]	; (800562c <TIM_Base_SetConfig+0xe8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a21      	ldr	r2, [pc, #132]	; (8005630 <TIM_Base_SetConfig+0xec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a20      	ldr	r2, [pc, #128]	; (8005634 <TIM_Base_SetConfig+0xf0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <TIM_Base_SetConfig+0xf4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1e      	ldr	r2, [pc, #120]	; (800563c <TIM_Base_SetConfig+0xf8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0x8a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <TIM_Base_SetConfig+0xfc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <TIM_Base_SetConfig+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	615a      	str	r2, [r3, #20]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40010000 	.word	0x40010000
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800

08005644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f023 0201 	bic.w	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800566e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 030a 	bic.w	r3, r3, #10
 8005680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f023 0210 	bic.w	r2, r3, #16
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	031b      	lsls	r3, r3, #12
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	f043 0307 	orr.w	r3, r3, #7
 8005724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	431a      	orrs	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800578c:	2302      	movs	r3, #2
 800578e:	e050      	b.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d013      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a18      	ldr	r2, [pc, #96]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10c      	bne.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800580c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4313      	orrs	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40014000 	.word	0x40014000

08005854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e03f      	b.n	800590e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fc ff46 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2224      	movs	r2, #36	; 0x24
 80058ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fd19 	bl	80062f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b088      	sub	sp, #32
 800591a:	af02      	add	r7, sp, #8
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	f040 8083 	bne.w	8005a3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_UART_Transmit+0x2e>
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e07b      	b.n	8005a40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UART_Transmit+0x40>
 8005952:	2302      	movs	r3, #2
 8005954:	e074      	b.n	8005a40 <HAL_UART_Transmit+0x12a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2221      	movs	r2, #33	; 0x21
 8005968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800596c:	f7fd f8de 	bl	8002b2c <HAL_GetTick>
 8005970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005986:	e042      	b.n	8005a0e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d122      	bne.n	80059e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fb23 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e042      	b.n	8005a40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3302      	adds	r3, #2
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	e017      	b.n	8005a0e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	e013      	b.n	8005a0e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fb00 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e01f      	b.n	8005a40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	60ba      	str	r2, [r7, #8]
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1b7      	bne.n	8005988 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fae7 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d153      	bne.n	8005b0a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_UART_Transmit_DMA+0x26>
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e04c      	b.n	8005b0c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit_DMA+0x38>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e045      	b.n	8005b0c <HAL_UART_Transmit_DMA+0xc4>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <HAL_UART_Transmit_DMA+0xcc>)
 8005aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <HAL_UART_Transmit_DMA+0xd0>)
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <HAL_UART_Transmit_DMA+0xd4>)
 8005abe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	461a      	mov	r2, r3
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	f7fd fa12 	bl	8002f08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b04:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08005e71 	.word	0x08005e71
 8005b18:	08005ec3 	.word	0x08005ec3
 8005b1c:	08005f63 	.word	0x08005f63

08005b20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d166      	bne.n	8005c08 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_UART_Receive_DMA+0x26>
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e05f      	b.n	8005c0a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_UART_Receive_DMA+0x38>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e058      	b.n	8005c0a <HAL_UART_Receive_DMA+0xea>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	88fa      	ldrh	r2, [r7, #6]
 8005b6a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2222      	movs	r2, #34	; 0x22
 8005b76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <HAL_UART_Receive_DMA+0xf4>)
 8005b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <HAL_UART_Receive_DMA+0xf8>)
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8e:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <HAL_UART_Receive_DMA+0xfc>)
 8005b90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	2200      	movs	r2, #0
 8005b98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	f7fd f9a9 	bl	8002f08 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c02:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	08005edf 	.word	0x08005edf
 8005c18:	08005f47 	.word	0x08005f47
 8005c1c:	08005f63 	.word	0x08005f63

08005c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_UART_IRQHandler+0x52>
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fac3 	bl	80061f6 <UART_Receive_IT>
      return;
 8005c70:	e0d1      	b.n	8005e16 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80b0 	beq.w	8005dda <HAL_UART_IRQHandler+0x1ba>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_UART_IRQHandler+0x70>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80a5 	beq.w	8005dda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x90>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	f043 0201 	orr.w	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_UART_IRQHandler+0xb0>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	f043 0202 	orr.w	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xd0>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	f043 0204 	orr.w	r2, r3, #4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00f      	beq.n	8005d1a <HAL_UART_IRQHandler+0xfa>
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <HAL_UART_IRQHandler+0xee>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	f043 0208 	orr.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d078      	beq.n	8005e14 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <HAL_UART_IRQHandler+0x11c>
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa5d 	bl	80061f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <HAL_UART_IRQHandler+0x144>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d031      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f9a6 	bl	80060b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d123      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d013      	beq.n	8005db8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <HAL_UART_IRQHandler+0x1fc>)
 8005d96:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fd f90b 	bl	8002fb8 <HAL_DMA_Abort_IT>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d016      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005db2:	4610      	mov	r0, r2
 8005db4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db6:	e00e      	b.n	8005dd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f84f 	bl	8005e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbe:	e00a      	b.n	8005dd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f84b 	bl	8005e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc6:	e006      	b.n	8005dd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f847 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005dd4:	e01e      	b.n	8005e14 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd6:	bf00      	nop
    return;
 8005dd8:	e01c      	b.n	8005e14 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_UART_IRQHandler+0x1d6>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f993 	bl	800611a <UART_Transmit_IT>
    return;
 8005df4:	e00f      	b.n	8005e16 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_UART_IRQHandler+0x1f6>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9db 	bl	80061c6 <UART_EndTransmit_IT>
    return;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005e14:	bf00      	nop
  }
}
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	080060f3 	.word	0x080060f3

08005e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d113      	bne.n	8005eb4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eb2:	e002      	b.n	8005eba <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff ffb3 	bl	8005e20 <HAL_UART_TxCpltCallback>
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ffaf 	bl	8005e34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11e      	bne.n	8005f38 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f0e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7fb fe89 	bl	8001c50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ff77 	bl	8005e48 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b21      	cmp	r3, #33	; 0x21
 8005f94:	d108      	bne.n	8005fa8 <UART_DMAError+0x46>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fa2:	68b8      	ldr	r0, [r7, #8]
 8005fa4:	f000 f871 	bl	800608a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	2300      	movne	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b22      	cmp	r3, #34	; 0x22
 8005fc8:	d108      	bne.n	8005fdc <UART_DMAError+0x7a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f000 f86d 	bl	80060b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	f043 0210 	orr.w	r2, r3, #16
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f7ff ff37 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006006:	e02c      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d028      	beq.n	8006062 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0x30>
 8006016:	f7fc fd89 	bl	8002b2c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d21d      	bcs.n	8006062 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006034:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e00f      	b.n	8006082 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4013      	ands	r3, r2
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	429a      	cmp	r2, r3
 800607e:	d0c3      	beq.n	8006008 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060a0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7ff fea5 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b21      	cmp	r3, #33	; 0x21
 800612c:	d144      	bne.n	80061b8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d11a      	bne.n	800616e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800614c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d105      	bne.n	8006162 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	1c9a      	adds	r2, r3, #2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	621a      	str	r2, [r3, #32]
 8006160:	e00e      	b.n	8006180 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	621a      	str	r2, [r3, #32]
 800616c:	e008      	b.n	8006180 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	1c59      	adds	r1, r3, #1
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6211      	str	r1, [r2, #32]
 8006178:	781a      	ldrb	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29b      	uxth	r3, r3
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4619      	mov	r1, r3
 800618e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10f      	bne.n	80061b4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
  }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fe1a 	bl	8005e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b22      	cmp	r3, #34	; 0x22
 8006208:	d171      	bne.n	80062ee <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d123      	bne.n	800625c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10e      	bne.n	8006240 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	629a      	str	r2, [r3, #40]	; 0x28
 800623e:	e029      	b.n	8006294 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	b29b      	uxth	r3, r3
 8006248:	b2db      	uxtb	r3, r3
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	629a      	str	r2, [r3, #40]	; 0x28
 800625a:	e01b      	b.n	8006294 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6858      	ldr	r0, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	1c59      	adds	r1, r3, #1
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6291      	str	r1, [r2, #40]	; 0x28
 8006274:	b2c2      	uxtb	r2, r0
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e00c      	b.n	8006294 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	1c58      	adds	r0, r3, #1
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	6288      	str	r0, [r1, #40]	; 0x28
 800628c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4619      	mov	r1, r3
 80062a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d120      	bne.n	80062ea <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0220 	bic.w	r2, r2, #32
 80062b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7fb fcb5 	bl	8001c50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e002      	b.n	80062f0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800633a:	f023 030c 	bic.w	r3, r3, #12
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	430b      	orrs	r3, r1
 8006346:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006366:	f040 818b 	bne.w	8006680 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4ac1      	ldr	r2, [pc, #772]	; (8006674 <UART_SetConfig+0x37c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d005      	beq.n	8006380 <UART_SetConfig+0x88>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4abf      	ldr	r2, [pc, #764]	; (8006678 <UART_SetConfig+0x380>)
 800637a:	4293      	cmp	r3, r2
 800637c:	f040 80bd 	bne.w	80064fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006380:	f7fe fe46 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 8006384:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	461d      	mov	r5, r3
 800638a:	f04f 0600 	mov.w	r6, #0
 800638e:	46a8      	mov	r8, r5
 8006390:	46b1      	mov	r9, r6
 8006392:	eb18 0308 	adds.w	r3, r8, r8
 8006396:	eb49 0409 	adc.w	r4, r9, r9
 800639a:	4698      	mov	r8, r3
 800639c:	46a1      	mov	r9, r4
 800639e:	eb18 0805 	adds.w	r8, r8, r5
 80063a2:	eb49 0906 	adc.w	r9, r9, r6
 80063a6:	f04f 0100 	mov.w	r1, #0
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ba:	4688      	mov	r8, r1
 80063bc:	4691      	mov	r9, r2
 80063be:	eb18 0005 	adds.w	r0, r8, r5
 80063c2:	eb49 0106 	adc.w	r1, r9, r6
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	461d      	mov	r5, r3
 80063cc:	f04f 0600 	mov.w	r6, #0
 80063d0:	196b      	adds	r3, r5, r5
 80063d2:	eb46 0406 	adc.w	r4, r6, r6
 80063d6:	461a      	mov	r2, r3
 80063d8:	4623      	mov	r3, r4
 80063da:	f7fa fb73 	bl	8000ac4 <__aeabi_uldivmod>
 80063de:	4603      	mov	r3, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	461a      	mov	r2, r3
 80063e4:	4ba5      	ldr	r3, [pc, #660]	; (800667c <UART_SetConfig+0x384>)
 80063e6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	461d      	mov	r5, r3
 80063f4:	f04f 0600 	mov.w	r6, #0
 80063f8:	46a9      	mov	r9, r5
 80063fa:	46b2      	mov	sl, r6
 80063fc:	eb19 0309 	adds.w	r3, r9, r9
 8006400:	eb4a 040a 	adc.w	r4, sl, sl
 8006404:	4699      	mov	r9, r3
 8006406:	46a2      	mov	sl, r4
 8006408:	eb19 0905 	adds.w	r9, r9, r5
 800640c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800641c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006420:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006424:	4689      	mov	r9, r1
 8006426:	4692      	mov	sl, r2
 8006428:	eb19 0005 	adds.w	r0, r9, r5
 800642c:	eb4a 0106 	adc.w	r1, sl, r6
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	461d      	mov	r5, r3
 8006436:	f04f 0600 	mov.w	r6, #0
 800643a:	196b      	adds	r3, r5, r5
 800643c:	eb46 0406 	adc.w	r4, r6, r6
 8006440:	461a      	mov	r2, r3
 8006442:	4623      	mov	r3, r4
 8006444:	f7fa fb3e 	bl	8000ac4 <__aeabi_uldivmod>
 8006448:	4603      	mov	r3, r0
 800644a:	460c      	mov	r4, r1
 800644c:	461a      	mov	r2, r3
 800644e:	4b8b      	ldr	r3, [pc, #556]	; (800667c <UART_SetConfig+0x384>)
 8006450:	fba3 1302 	umull	r1, r3, r3, r2
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	2164      	movs	r1, #100	; 0x64
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	3332      	adds	r3, #50	; 0x32
 8006462:	4a86      	ldr	r2, [pc, #536]	; (800667c <UART_SetConfig+0x384>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006470:	4498      	add	r8, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	461d      	mov	r5, r3
 8006476:	f04f 0600 	mov.w	r6, #0
 800647a:	46a9      	mov	r9, r5
 800647c:	46b2      	mov	sl, r6
 800647e:	eb19 0309 	adds.w	r3, r9, r9
 8006482:	eb4a 040a 	adc.w	r4, sl, sl
 8006486:	4699      	mov	r9, r3
 8006488:	46a2      	mov	sl, r4
 800648a:	eb19 0905 	adds.w	r9, r9, r5
 800648e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006492:	f04f 0100 	mov.w	r1, #0
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064a6:	4689      	mov	r9, r1
 80064a8:	4692      	mov	sl, r2
 80064aa:	eb19 0005 	adds.w	r0, r9, r5
 80064ae:	eb4a 0106 	adc.w	r1, sl, r6
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	461d      	mov	r5, r3
 80064b8:	f04f 0600 	mov.w	r6, #0
 80064bc:	196b      	adds	r3, r5, r5
 80064be:	eb46 0406 	adc.w	r4, r6, r6
 80064c2:	461a      	mov	r2, r3
 80064c4:	4623      	mov	r3, r4
 80064c6:	f7fa fafd 	bl	8000ac4 <__aeabi_uldivmod>
 80064ca:	4603      	mov	r3, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	461a      	mov	r2, r3
 80064d0:	4b6a      	ldr	r3, [pc, #424]	; (800667c <UART_SetConfig+0x384>)
 80064d2:	fba3 1302 	umull	r1, r3, r3, r2
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2164      	movs	r1, #100	; 0x64
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	3332      	adds	r3, #50	; 0x32
 80064e4:	4a65      	ldr	r2, [pc, #404]	; (800667c <UART_SetConfig+0x384>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f003 0207 	and.w	r2, r3, #7
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4442      	add	r2, r8
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	e26f      	b.n	80069da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064fa:	f7fe fd75 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 80064fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	461d      	mov	r5, r3
 8006504:	f04f 0600 	mov.w	r6, #0
 8006508:	46a8      	mov	r8, r5
 800650a:	46b1      	mov	r9, r6
 800650c:	eb18 0308 	adds.w	r3, r8, r8
 8006510:	eb49 0409 	adc.w	r4, r9, r9
 8006514:	4698      	mov	r8, r3
 8006516:	46a1      	mov	r9, r4
 8006518:	eb18 0805 	adds.w	r8, r8, r5
 800651c:	eb49 0906 	adc.w	r9, r9, r6
 8006520:	f04f 0100 	mov.w	r1, #0
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800652c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006530:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006534:	4688      	mov	r8, r1
 8006536:	4691      	mov	r9, r2
 8006538:	eb18 0005 	adds.w	r0, r8, r5
 800653c:	eb49 0106 	adc.w	r1, r9, r6
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	461d      	mov	r5, r3
 8006546:	f04f 0600 	mov.w	r6, #0
 800654a:	196b      	adds	r3, r5, r5
 800654c:	eb46 0406 	adc.w	r4, r6, r6
 8006550:	461a      	mov	r2, r3
 8006552:	4623      	mov	r3, r4
 8006554:	f7fa fab6 	bl	8000ac4 <__aeabi_uldivmod>
 8006558:	4603      	mov	r3, r0
 800655a:	460c      	mov	r4, r1
 800655c:	461a      	mov	r2, r3
 800655e:	4b47      	ldr	r3, [pc, #284]	; (800667c <UART_SetConfig+0x384>)
 8006560:	fba3 2302 	umull	r2, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	461d      	mov	r5, r3
 800656e:	f04f 0600 	mov.w	r6, #0
 8006572:	46a9      	mov	r9, r5
 8006574:	46b2      	mov	sl, r6
 8006576:	eb19 0309 	adds.w	r3, r9, r9
 800657a:	eb4a 040a 	adc.w	r4, sl, sl
 800657e:	4699      	mov	r9, r3
 8006580:	46a2      	mov	sl, r4
 8006582:	eb19 0905 	adds.w	r9, r9, r5
 8006586:	eb4a 0a06 	adc.w	sl, sl, r6
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006596:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800659a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800659e:	4689      	mov	r9, r1
 80065a0:	4692      	mov	sl, r2
 80065a2:	eb19 0005 	adds.w	r0, r9, r5
 80065a6:	eb4a 0106 	adc.w	r1, sl, r6
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	461d      	mov	r5, r3
 80065b0:	f04f 0600 	mov.w	r6, #0
 80065b4:	196b      	adds	r3, r5, r5
 80065b6:	eb46 0406 	adc.w	r4, r6, r6
 80065ba:	461a      	mov	r2, r3
 80065bc:	4623      	mov	r3, r4
 80065be:	f7fa fa81 	bl	8000ac4 <__aeabi_uldivmod>
 80065c2:	4603      	mov	r3, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b2c      	ldr	r3, [pc, #176]	; (800667c <UART_SetConfig+0x384>)
 80065ca:	fba3 1302 	umull	r1, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2164      	movs	r1, #100	; 0x64
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	3332      	adds	r3, #50	; 0x32
 80065dc:	4a27      	ldr	r2, [pc, #156]	; (800667c <UART_SetConfig+0x384>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ea:	4498      	add	r8, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	461d      	mov	r5, r3
 80065f0:	f04f 0600 	mov.w	r6, #0
 80065f4:	46a9      	mov	r9, r5
 80065f6:	46b2      	mov	sl, r6
 80065f8:	eb19 0309 	adds.w	r3, r9, r9
 80065fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006600:	4699      	mov	r9, r3
 8006602:	46a2      	mov	sl, r4
 8006604:	eb19 0905 	adds.w	r9, r9, r5
 8006608:	eb4a 0a06 	adc.w	sl, sl, r6
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800661c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006620:	4689      	mov	r9, r1
 8006622:	4692      	mov	sl, r2
 8006624:	eb19 0005 	adds.w	r0, r9, r5
 8006628:	eb4a 0106 	adc.w	r1, sl, r6
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	461d      	mov	r5, r3
 8006632:	f04f 0600 	mov.w	r6, #0
 8006636:	196b      	adds	r3, r5, r5
 8006638:	eb46 0406 	adc.w	r4, r6, r6
 800663c:	461a      	mov	r2, r3
 800663e:	4623      	mov	r3, r4
 8006640:	f7fa fa40 	bl	8000ac4 <__aeabi_uldivmod>
 8006644:	4603      	mov	r3, r0
 8006646:	460c      	mov	r4, r1
 8006648:	461a      	mov	r2, r3
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <UART_SetConfig+0x384>)
 800664c:	fba3 1302 	umull	r1, r3, r3, r2
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	2164      	movs	r1, #100	; 0x64
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	3332      	adds	r3, #50	; 0x32
 800665e:	4a07      	ldr	r2, [pc, #28]	; (800667c <UART_SetConfig+0x384>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f003 0207 	and.w	r2, r3, #7
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4442      	add	r2, r8
 8006670:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006672:	e1b2      	b.n	80069da <UART_SetConfig+0x6e2>
 8006674:	40011000 	.word	0x40011000
 8006678:	40011400 	.word	0x40011400
 800667c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4ad7      	ldr	r2, [pc, #860]	; (80069e4 <UART_SetConfig+0x6ec>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d005      	beq.n	8006696 <UART_SetConfig+0x39e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4ad6      	ldr	r2, [pc, #856]	; (80069e8 <UART_SetConfig+0x6f0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	f040 80d1 	bne.w	8006838 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006696:	f7fe fcbb 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 800669a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	469a      	mov	sl, r3
 80066a0:	f04f 0b00 	mov.w	fp, #0
 80066a4:	46d0      	mov	r8, sl
 80066a6:	46d9      	mov	r9, fp
 80066a8:	eb18 0308 	adds.w	r3, r8, r8
 80066ac:	eb49 0409 	adc.w	r4, r9, r9
 80066b0:	4698      	mov	r8, r3
 80066b2:	46a1      	mov	r9, r4
 80066b4:	eb18 080a 	adds.w	r8, r8, sl
 80066b8:	eb49 090b 	adc.w	r9, r9, fp
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066d0:	4688      	mov	r8, r1
 80066d2:	4691      	mov	r9, r2
 80066d4:	eb1a 0508 	adds.w	r5, sl, r8
 80066d8:	eb4b 0609 	adc.w	r6, fp, r9
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4619      	mov	r1, r3
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	f04f 0400 	mov.w	r4, #0
 80066ee:	0094      	lsls	r4, r2, #2
 80066f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f4:	008b      	lsls	r3, r1, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	4623      	mov	r3, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	4631      	mov	r1, r6
 80066fe:	f7fa f9e1 	bl	8000ac4 <__aeabi_uldivmod>
 8006702:	4603      	mov	r3, r0
 8006704:	460c      	mov	r4, r1
 8006706:	461a      	mov	r2, r3
 8006708:	4bb8      	ldr	r3, [pc, #736]	; (80069ec <UART_SetConfig+0x6f4>)
 800670a:	fba3 2302 	umull	r2, r3, r3, r2
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	469b      	mov	fp, r3
 8006718:	f04f 0c00 	mov.w	ip, #0
 800671c:	46d9      	mov	r9, fp
 800671e:	46e2      	mov	sl, ip
 8006720:	eb19 0309 	adds.w	r3, r9, r9
 8006724:	eb4a 040a 	adc.w	r4, sl, sl
 8006728:	4699      	mov	r9, r3
 800672a:	46a2      	mov	sl, r4
 800672c:	eb19 090b 	adds.w	r9, r9, fp
 8006730:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006734:	f04f 0100 	mov.w	r1, #0
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006740:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006748:	4689      	mov	r9, r1
 800674a:	4692      	mov	sl, r2
 800674c:	eb1b 0509 	adds.w	r5, fp, r9
 8006750:	eb4c 060a 	adc.w	r6, ip, sl
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4619      	mov	r1, r3
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	f04f 0400 	mov.w	r4, #0
 8006766:	0094      	lsls	r4, r2, #2
 8006768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800676c:	008b      	lsls	r3, r1, #2
 800676e:	461a      	mov	r2, r3
 8006770:	4623      	mov	r3, r4
 8006772:	4628      	mov	r0, r5
 8006774:	4631      	mov	r1, r6
 8006776:	f7fa f9a5 	bl	8000ac4 <__aeabi_uldivmod>
 800677a:	4603      	mov	r3, r0
 800677c:	460c      	mov	r4, r1
 800677e:	461a      	mov	r2, r3
 8006780:	4b9a      	ldr	r3, [pc, #616]	; (80069ec <UART_SetConfig+0x6f4>)
 8006782:	fba3 1302 	umull	r1, r3, r3, r2
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	2164      	movs	r1, #100	; 0x64
 800678a:	fb01 f303 	mul.w	r3, r1, r3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	3332      	adds	r3, #50	; 0x32
 8006794:	4a95      	ldr	r2, [pc, #596]	; (80069ec <UART_SetConfig+0x6f4>)
 8006796:	fba2 2303 	umull	r2, r3, r2, r3
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067a0:	4498      	add	r8, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	469b      	mov	fp, r3
 80067a6:	f04f 0c00 	mov.w	ip, #0
 80067aa:	46d9      	mov	r9, fp
 80067ac:	46e2      	mov	sl, ip
 80067ae:	eb19 0309 	adds.w	r3, r9, r9
 80067b2:	eb4a 040a 	adc.w	r4, sl, sl
 80067b6:	4699      	mov	r9, r3
 80067b8:	46a2      	mov	sl, r4
 80067ba:	eb19 090b 	adds.w	r9, r9, fp
 80067be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067d6:	4689      	mov	r9, r1
 80067d8:	4692      	mov	sl, r2
 80067da:	eb1b 0509 	adds.w	r5, fp, r9
 80067de:	eb4c 060a 	adc.w	r6, ip, sl
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4619      	mov	r1, r3
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	f04f 0400 	mov.w	r4, #0
 80067f4:	0094      	lsls	r4, r2, #2
 80067f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067fa:	008b      	lsls	r3, r1, #2
 80067fc:	461a      	mov	r2, r3
 80067fe:	4623      	mov	r3, r4
 8006800:	4628      	mov	r0, r5
 8006802:	4631      	mov	r1, r6
 8006804:	f7fa f95e 	bl	8000ac4 <__aeabi_uldivmod>
 8006808:	4603      	mov	r3, r0
 800680a:	460c      	mov	r4, r1
 800680c:	461a      	mov	r2, r3
 800680e:	4b77      	ldr	r3, [pc, #476]	; (80069ec <UART_SetConfig+0x6f4>)
 8006810:	fba3 1302 	umull	r1, r3, r3, r2
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	2164      	movs	r1, #100	; 0x64
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	3332      	adds	r3, #50	; 0x32
 8006822:	4a72      	ldr	r2, [pc, #456]	; (80069ec <UART_SetConfig+0x6f4>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	f003 020f 	and.w	r2, r3, #15
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4442      	add	r2, r8
 8006834:	609a      	str	r2, [r3, #8]
 8006836:	e0d0      	b.n	80069da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fe fbd6 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 800683c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	469a      	mov	sl, r3
 8006842:	f04f 0b00 	mov.w	fp, #0
 8006846:	46d0      	mov	r8, sl
 8006848:	46d9      	mov	r9, fp
 800684a:	eb18 0308 	adds.w	r3, r8, r8
 800684e:	eb49 0409 	adc.w	r4, r9, r9
 8006852:	4698      	mov	r8, r3
 8006854:	46a1      	mov	r9, r4
 8006856:	eb18 080a 	adds.w	r8, r8, sl
 800685a:	eb49 090b 	adc.w	r9, r9, fp
 800685e:	f04f 0100 	mov.w	r1, #0
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800686a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800686e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006872:	4688      	mov	r8, r1
 8006874:	4691      	mov	r9, r2
 8006876:	eb1a 0508 	adds.w	r5, sl, r8
 800687a:	eb4b 0609 	adc.w	r6, fp, r9
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4619      	mov	r1, r3
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	f04f 0400 	mov.w	r4, #0
 8006890:	0094      	lsls	r4, r2, #2
 8006892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006896:	008b      	lsls	r3, r1, #2
 8006898:	461a      	mov	r2, r3
 800689a:	4623      	mov	r3, r4
 800689c:	4628      	mov	r0, r5
 800689e:	4631      	mov	r1, r6
 80068a0:	f7fa f910 	bl	8000ac4 <__aeabi_uldivmod>
 80068a4:	4603      	mov	r3, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	461a      	mov	r2, r3
 80068aa:	4b50      	ldr	r3, [pc, #320]	; (80069ec <UART_SetConfig+0x6f4>)
 80068ac:	fba3 2302 	umull	r2, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	469b      	mov	fp, r3
 80068ba:	f04f 0c00 	mov.w	ip, #0
 80068be:	46d9      	mov	r9, fp
 80068c0:	46e2      	mov	sl, ip
 80068c2:	eb19 0309 	adds.w	r3, r9, r9
 80068c6:	eb4a 040a 	adc.w	r4, sl, sl
 80068ca:	4699      	mov	r9, r3
 80068cc:	46a2      	mov	sl, r4
 80068ce:	eb19 090b 	adds.w	r9, r9, fp
 80068d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068d6:	f04f 0100 	mov.w	r1, #0
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ea:	4689      	mov	r9, r1
 80068ec:	4692      	mov	sl, r2
 80068ee:	eb1b 0509 	adds.w	r5, fp, r9
 80068f2:	eb4c 060a 	adc.w	r6, ip, sl
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4619      	mov	r1, r3
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	f04f 0400 	mov.w	r4, #0
 8006908:	0094      	lsls	r4, r2, #2
 800690a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800690e:	008b      	lsls	r3, r1, #2
 8006910:	461a      	mov	r2, r3
 8006912:	4623      	mov	r3, r4
 8006914:	4628      	mov	r0, r5
 8006916:	4631      	mov	r1, r6
 8006918:	f7fa f8d4 	bl	8000ac4 <__aeabi_uldivmod>
 800691c:	4603      	mov	r3, r0
 800691e:	460c      	mov	r4, r1
 8006920:	461a      	mov	r2, r3
 8006922:	4b32      	ldr	r3, [pc, #200]	; (80069ec <UART_SetConfig+0x6f4>)
 8006924:	fba3 1302 	umull	r1, r3, r3, r2
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	2164      	movs	r1, #100	; 0x64
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	3332      	adds	r3, #50	; 0x32
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <UART_SetConfig+0x6f4>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006942:	4498      	add	r8, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	469b      	mov	fp, r3
 8006948:	f04f 0c00 	mov.w	ip, #0
 800694c:	46d9      	mov	r9, fp
 800694e:	46e2      	mov	sl, ip
 8006950:	eb19 0309 	adds.w	r3, r9, r9
 8006954:	eb4a 040a 	adc.w	r4, sl, sl
 8006958:	4699      	mov	r9, r3
 800695a:	46a2      	mov	sl, r4
 800695c:	eb19 090b 	adds.w	r9, r9, fp
 8006960:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006964:	f04f 0100 	mov.w	r1, #0
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006978:	4689      	mov	r9, r1
 800697a:	4692      	mov	sl, r2
 800697c:	eb1b 0509 	adds.w	r5, fp, r9
 8006980:	eb4c 060a 	adc.w	r6, ip, sl
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4619      	mov	r1, r3
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	0094      	lsls	r4, r2, #2
 8006998:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800699c:	008b      	lsls	r3, r1, #2
 800699e:	461a      	mov	r2, r3
 80069a0:	4623      	mov	r3, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	4631      	mov	r1, r6
 80069a6:	f7fa f88d 	bl	8000ac4 <__aeabi_uldivmod>
 80069aa:	4603      	mov	r3, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	461a      	mov	r2, r3
 80069b0:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <UART_SetConfig+0x6f4>)
 80069b2:	fba3 1302 	umull	r1, r3, r3, r2
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	2164      	movs	r1, #100	; 0x64
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	3332      	adds	r3, #50	; 0x32
 80069c4:	4a09      	ldr	r2, [pc, #36]	; (80069ec <UART_SetConfig+0x6f4>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	f003 020f 	and.w	r2, r3, #15
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4442      	add	r2, r8
 80069d6:	609a      	str	r2, [r3, #8]
}
 80069d8:	e7ff      	b.n	80069da <UART_SetConfig+0x6e2>
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	40011000 	.word	0x40011000
 80069e8:	40011400 	.word	0x40011400
 80069ec:	51eb851f 	.word	0x51eb851f

080069f0 <__errno>:
 80069f0:	4b01      	ldr	r3, [pc, #4]	; (80069f8 <__errno+0x8>)
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	2000000c 	.word	0x2000000c

080069fc <__libc_init_array>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4e0d      	ldr	r6, [pc, #52]	; (8006a34 <__libc_init_array+0x38>)
 8006a00:	4c0d      	ldr	r4, [pc, #52]	; (8006a38 <__libc_init_array+0x3c>)
 8006a02:	1ba4      	subs	r4, r4, r6
 8006a04:	10a4      	asrs	r4, r4, #2
 8006a06:	2500      	movs	r5, #0
 8006a08:	42a5      	cmp	r5, r4
 8006a0a:	d109      	bne.n	8006a20 <__libc_init_array+0x24>
 8006a0c:	4e0b      	ldr	r6, [pc, #44]	; (8006a3c <__libc_init_array+0x40>)
 8006a0e:	4c0c      	ldr	r4, [pc, #48]	; (8006a40 <__libc_init_array+0x44>)
 8006a10:	f000 fb2c 	bl	800706c <_init>
 8006a14:	1ba4      	subs	r4, r4, r6
 8006a16:	10a4      	asrs	r4, r4, #2
 8006a18:	2500      	movs	r5, #0
 8006a1a:	42a5      	cmp	r5, r4
 8006a1c:	d105      	bne.n	8006a2a <__libc_init_array+0x2e>
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a24:	4798      	blx	r3
 8006a26:	3501      	adds	r5, #1
 8006a28:	e7ee      	b.n	8006a08 <__libc_init_array+0xc>
 8006a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a2e:	4798      	blx	r3
 8006a30:	3501      	adds	r5, #1
 8006a32:	e7f2      	b.n	8006a1a <__libc_init_array+0x1e>
 8006a34:	080070f0 	.word	0x080070f0
 8006a38:	080070f0 	.word	0x080070f0
 8006a3c:	080070f0 	.word	0x080070f0
 8006a40:	080070f4 	.word	0x080070f4

08006a44 <malloc>:
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <malloc+0xc>)
 8006a46:	4601      	mov	r1, r0
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	f000 b817 	b.w	8006a7c <_malloc_r>
 8006a4e:	bf00      	nop
 8006a50:	2000000c 	.word	0x2000000c

08006a54 <memcpy>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	1e43      	subs	r3, r0, #1
 8006a58:	440a      	add	r2, r1
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	d100      	bne.n	8006a60 <memcpy+0xc>
 8006a5e:	bd10      	pop	{r4, pc}
 8006a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a68:	e7f7      	b.n	8006a5a <memcpy+0x6>

08006a6a <memset>:
 8006a6a:	4402      	add	r2, r0
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d100      	bne.n	8006a74 <memset+0xa>
 8006a72:	4770      	bx	lr
 8006a74:	f803 1b01 	strb.w	r1, [r3], #1
 8006a78:	e7f9      	b.n	8006a6e <memset+0x4>
	...

08006a7c <_malloc_r>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	1ccd      	adds	r5, r1, #3
 8006a80:	f025 0503 	bic.w	r5, r5, #3
 8006a84:	3508      	adds	r5, #8
 8006a86:	2d0c      	cmp	r5, #12
 8006a88:	bf38      	it	cc
 8006a8a:	250c      	movcc	r5, #12
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	4606      	mov	r6, r0
 8006a90:	db01      	blt.n	8006a96 <_malloc_r+0x1a>
 8006a92:	42a9      	cmp	r1, r5
 8006a94:	d903      	bls.n	8006a9e <_malloc_r+0x22>
 8006a96:	230c      	movs	r3, #12
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	f000 f857 	bl	8006b50 <__malloc_lock>
 8006aa2:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <_malloc_r+0xac>)
 8006aa4:	6814      	ldr	r4, [r2, #0]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	b991      	cbnz	r1, 8006ad0 <_malloc_r+0x54>
 8006aaa:	4c20      	ldr	r4, [pc, #128]	; (8006b2c <_malloc_r+0xb0>)
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	b91b      	cbnz	r3, 8006ab8 <_malloc_r+0x3c>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f83d 	bl	8006b30 <_sbrk_r>
 8006ab6:	6020      	str	r0, [r4, #0]
 8006ab8:	4629      	mov	r1, r5
 8006aba:	4630      	mov	r0, r6
 8006abc:	f000 f838 	bl	8006b30 <_sbrk_r>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d124      	bne.n	8006b0e <_malloc_r+0x92>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	6033      	str	r3, [r6, #0]
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f842 	bl	8006b52 <__malloc_unlock>
 8006ace:	e7e4      	b.n	8006a9a <_malloc_r+0x1e>
 8006ad0:	680b      	ldr	r3, [r1, #0]
 8006ad2:	1b5b      	subs	r3, r3, r5
 8006ad4:	d418      	bmi.n	8006b08 <_malloc_r+0x8c>
 8006ad6:	2b0b      	cmp	r3, #11
 8006ad8:	d90f      	bls.n	8006afa <_malloc_r+0x7e>
 8006ada:	600b      	str	r3, [r1, #0]
 8006adc:	50cd      	str	r5, [r1, r3]
 8006ade:	18cc      	adds	r4, r1, r3
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f836 	bl	8006b52 <__malloc_unlock>
 8006ae6:	f104 000b 	add.w	r0, r4, #11
 8006aea:	1d23      	adds	r3, r4, #4
 8006aec:	f020 0007 	bic.w	r0, r0, #7
 8006af0:	1ac3      	subs	r3, r0, r3
 8006af2:	d0d3      	beq.n	8006a9c <_malloc_r+0x20>
 8006af4:	425a      	negs	r2, r3
 8006af6:	50e2      	str	r2, [r4, r3]
 8006af8:	e7d0      	b.n	8006a9c <_malloc_r+0x20>
 8006afa:	428c      	cmp	r4, r1
 8006afc:	684b      	ldr	r3, [r1, #4]
 8006afe:	bf16      	itet	ne
 8006b00:	6063      	strne	r3, [r4, #4]
 8006b02:	6013      	streq	r3, [r2, #0]
 8006b04:	460c      	movne	r4, r1
 8006b06:	e7eb      	b.n	8006ae0 <_malloc_r+0x64>
 8006b08:	460c      	mov	r4, r1
 8006b0a:	6849      	ldr	r1, [r1, #4]
 8006b0c:	e7cc      	b.n	8006aa8 <_malloc_r+0x2c>
 8006b0e:	1cc4      	adds	r4, r0, #3
 8006b10:	f024 0403 	bic.w	r4, r4, #3
 8006b14:	42a0      	cmp	r0, r4
 8006b16:	d005      	beq.n	8006b24 <_malloc_r+0xa8>
 8006b18:	1a21      	subs	r1, r4, r0
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f808 	bl	8006b30 <_sbrk_r>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d0cf      	beq.n	8006ac4 <_malloc_r+0x48>
 8006b24:	6025      	str	r5, [r4, #0]
 8006b26:	e7db      	b.n	8006ae0 <_malloc_r+0x64>
 8006b28:	20000130 	.word	0x20000130
 8006b2c:	20000134 	.word	0x20000134

08006b30 <_sbrk_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4c06      	ldr	r4, [pc, #24]	; (8006b4c <_sbrk_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4605      	mov	r5, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	f7fb ff24 	bl	8002988 <_sbrk>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_sbrk_r+0x1a>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_sbrk_r+0x1a>
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	200003a0 	.word	0x200003a0

08006b50 <__malloc_lock>:
 8006b50:	4770      	bx	lr

08006b52 <__malloc_unlock>:
 8006b52:	4770      	bx	lr

08006b54 <atan2>:
 8006b54:	f000 b800 	b.w	8006b58 <__ieee754_atan2>

08006b58 <__ieee754_atan2>:
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	ec57 6b11 	vmov	r6, r7, d1
 8006b60:	4273      	negs	r3, r6
 8006b62:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006b66:	4333      	orrs	r3, r6
 8006b68:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006d10 <__ieee754_atan2+0x1b8>
 8006b6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006b70:	4573      	cmp	r3, lr
 8006b72:	ec51 0b10 	vmov	r0, r1, d0
 8006b76:	ee11 8a10 	vmov	r8, s2
 8006b7a:	d80a      	bhi.n	8006b92 <__ieee754_atan2+0x3a>
 8006b7c:	4244      	negs	r4, r0
 8006b7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b82:	4304      	orrs	r4, r0
 8006b84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006b88:	4574      	cmp	r4, lr
 8006b8a:	468c      	mov	ip, r1
 8006b8c:	ee10 9a10 	vmov	r9, s0
 8006b90:	d907      	bls.n	8006ba2 <__ieee754_atan2+0x4a>
 8006b92:	4632      	mov	r2, r6
 8006b94:	463b      	mov	r3, r7
 8006b96:	f7f9 fb25 	bl	80001e4 <__adddf3>
 8006b9a:	ec41 0b10 	vmov	d0, r0, r1
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006ba6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006baa:	4334      	orrs	r4, r6
 8006bac:	d103      	bne.n	8006bb6 <__ieee754_atan2+0x5e>
 8006bae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb2:	f000 b8b1 	b.w	8006d18 <atan>
 8006bb6:	17bc      	asrs	r4, r7, #30
 8006bb8:	f004 0402 	and.w	r4, r4, #2
 8006bbc:	ea53 0909 	orrs.w	r9, r3, r9
 8006bc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006bc4:	d107      	bne.n	8006bd6 <__ieee754_atan2+0x7e>
 8006bc6:	2c02      	cmp	r4, #2
 8006bc8:	d073      	beq.n	8006cb2 <__ieee754_atan2+0x15a>
 8006bca:	2c03      	cmp	r4, #3
 8006bcc:	d1e5      	bne.n	8006b9a <__ieee754_atan2+0x42>
 8006bce:	a13e      	add	r1, pc, #248	; (adr r1, 8006cc8 <__ieee754_atan2+0x170>)
 8006bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd4:	e7e1      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006bd6:	ea52 0808 	orrs.w	r8, r2, r8
 8006bda:	d106      	bne.n	8006bea <__ieee754_atan2+0x92>
 8006bdc:	f1bc 0f00 	cmp.w	ip, #0
 8006be0:	da6b      	bge.n	8006cba <__ieee754_atan2+0x162>
 8006be2:	a13b      	add	r1, pc, #236	; (adr r1, 8006cd0 <__ieee754_atan2+0x178>)
 8006be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be8:	e7d7      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006bea:	4572      	cmp	r2, lr
 8006bec:	d120      	bne.n	8006c30 <__ieee754_atan2+0xd8>
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d111      	bne.n	8006c16 <__ieee754_atan2+0xbe>
 8006bf2:	2c02      	cmp	r4, #2
 8006bf4:	d007      	beq.n	8006c06 <__ieee754_atan2+0xae>
 8006bf6:	2c03      	cmp	r4, #3
 8006bf8:	d009      	beq.n	8006c0e <__ieee754_atan2+0xb6>
 8006bfa:	2c01      	cmp	r4, #1
 8006bfc:	d155      	bne.n	8006caa <__ieee754_atan2+0x152>
 8006bfe:	a136      	add	r1, pc, #216	; (adr r1, 8006cd8 <__ieee754_atan2+0x180>)
 8006c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c04:	e7c9      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006c06:	a136      	add	r1, pc, #216	; (adr r1, 8006ce0 <__ieee754_atan2+0x188>)
 8006c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c0c:	e7c5      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006c0e:	a136      	add	r1, pc, #216	; (adr r1, 8006ce8 <__ieee754_atan2+0x190>)
 8006c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c14:	e7c1      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006c16:	2c02      	cmp	r4, #2
 8006c18:	d04b      	beq.n	8006cb2 <__ieee754_atan2+0x15a>
 8006c1a:	2c03      	cmp	r4, #3
 8006c1c:	d0d7      	beq.n	8006bce <__ieee754_atan2+0x76>
 8006c1e:	2c01      	cmp	r4, #1
 8006c20:	f04f 0000 	mov.w	r0, #0
 8006c24:	d102      	bne.n	8006c2c <__ieee754_atan2+0xd4>
 8006c26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006c2a:	e7b6      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	e7b4      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006c30:	4573      	cmp	r3, lr
 8006c32:	d0d3      	beq.n	8006bdc <__ieee754_atan2+0x84>
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	151b      	asrs	r3, r3, #20
 8006c38:	2b3c      	cmp	r3, #60	; 0x3c
 8006c3a:	dc1e      	bgt.n	8006c7a <__ieee754_atan2+0x122>
 8006c3c:	2f00      	cmp	r7, #0
 8006c3e:	da01      	bge.n	8006c44 <__ieee754_atan2+0xec>
 8006c40:	333c      	adds	r3, #60	; 0x3c
 8006c42:	db1e      	blt.n	8006c82 <__ieee754_atan2+0x12a>
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	f7f9 fdac 	bl	80007a4 <__aeabi_ddiv>
 8006c4c:	ec41 0b10 	vmov	d0, r0, r1
 8006c50:	f000 fa02 	bl	8007058 <fabs>
 8006c54:	f000 f860 	bl	8006d18 <atan>
 8006c58:	ec51 0b10 	vmov	r0, r1, d0
 8006c5c:	2c01      	cmp	r4, #1
 8006c5e:	d013      	beq.n	8006c88 <__ieee754_atan2+0x130>
 8006c60:	2c02      	cmp	r4, #2
 8006c62:	d015      	beq.n	8006c90 <__ieee754_atan2+0x138>
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d098      	beq.n	8006b9a <__ieee754_atan2+0x42>
 8006c68:	a321      	add	r3, pc, #132	; (adr r3, 8006cf0 <__ieee754_atan2+0x198>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fab7 	bl	80001e0 <__aeabi_dsub>
 8006c72:	a321      	add	r3, pc, #132	; (adr r3, 8006cf8 <__ieee754_atan2+0x1a0>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	e014      	b.n	8006ca4 <__ieee754_atan2+0x14c>
 8006c7a:	a121      	add	r1, pc, #132	; (adr r1, 8006d00 <__ieee754_atan2+0x1a8>)
 8006c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c80:	e7ec      	b.n	8006c5c <__ieee754_atan2+0x104>
 8006c82:	2000      	movs	r0, #0
 8006c84:	2100      	movs	r1, #0
 8006c86:	e7e9      	b.n	8006c5c <__ieee754_atan2+0x104>
 8006c88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	e784      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006c90:	a317      	add	r3, pc, #92	; (adr r3, 8006cf0 <__ieee754_atan2+0x198>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 faa3 	bl	80001e0 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	a116      	add	r1, pc, #88	; (adr r1, 8006cf8 <__ieee754_atan2+0x1a0>)
 8006ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca4:	f7f9 fa9c 	bl	80001e0 <__aeabi_dsub>
 8006ca8:	e777      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006caa:	a117      	add	r1, pc, #92	; (adr r1, 8006d08 <__ieee754_atan2+0x1b0>)
 8006cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb0:	e773      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006cb2:	a111      	add	r1, pc, #68	; (adr r1, 8006cf8 <__ieee754_atan2+0x1a0>)
 8006cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb8:	e76f      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006cba:	a111      	add	r1, pc, #68	; (adr r1, 8006d00 <__ieee754_atan2+0x1a8>)
 8006cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cc0:	e76b      	b.n	8006b9a <__ieee754_atan2+0x42>
 8006cc2:	bf00      	nop
 8006cc4:	f3af 8000 	nop.w
 8006cc8:	54442d18 	.word	0x54442d18
 8006ccc:	c00921fb 	.word	0xc00921fb
 8006cd0:	54442d18 	.word	0x54442d18
 8006cd4:	bff921fb 	.word	0xbff921fb
 8006cd8:	54442d18 	.word	0x54442d18
 8006cdc:	bfe921fb 	.word	0xbfe921fb
 8006ce0:	7f3321d2 	.word	0x7f3321d2
 8006ce4:	4002d97c 	.word	0x4002d97c
 8006ce8:	7f3321d2 	.word	0x7f3321d2
 8006cec:	c002d97c 	.word	0xc002d97c
 8006cf0:	33145c07 	.word	0x33145c07
 8006cf4:	3ca1a626 	.word	0x3ca1a626
 8006cf8:	54442d18 	.word	0x54442d18
 8006cfc:	400921fb 	.word	0x400921fb
 8006d00:	54442d18 	.word	0x54442d18
 8006d04:	3ff921fb 	.word	0x3ff921fb
 8006d08:	54442d18 	.word	0x54442d18
 8006d0c:	3fe921fb 	.word	0x3fe921fb
 8006d10:	7ff00000 	.word	0x7ff00000
 8006d14:	00000000 	.word	0x00000000

08006d18 <atan>:
 8006d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	ec55 4b10 	vmov	r4, r5, d0
 8006d20:	4bc3      	ldr	r3, [pc, #780]	; (8007030 <atan+0x318>)
 8006d22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d26:	429e      	cmp	r6, r3
 8006d28:	46ab      	mov	fp, r5
 8006d2a:	dd18      	ble.n	8006d5e <atan+0x46>
 8006d2c:	4bc1      	ldr	r3, [pc, #772]	; (8007034 <atan+0x31c>)
 8006d2e:	429e      	cmp	r6, r3
 8006d30:	dc01      	bgt.n	8006d36 <atan+0x1e>
 8006d32:	d109      	bne.n	8006d48 <atan+0x30>
 8006d34:	b144      	cbz	r4, 8006d48 <atan+0x30>
 8006d36:	4622      	mov	r2, r4
 8006d38:	462b      	mov	r3, r5
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fa51 	bl	80001e4 <__adddf3>
 8006d42:	4604      	mov	r4, r0
 8006d44:	460d      	mov	r5, r1
 8006d46:	e006      	b.n	8006d56 <atan+0x3e>
 8006d48:	f1bb 0f00 	cmp.w	fp, #0
 8006d4c:	f340 8131 	ble.w	8006fb2 <atan+0x29a>
 8006d50:	a59b      	add	r5, pc, #620	; (adr r5, 8006fc0 <atan+0x2a8>)
 8006d52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d56:	ec45 4b10 	vmov	d0, r4, r5
 8006d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	4bb6      	ldr	r3, [pc, #728]	; (8007038 <atan+0x320>)
 8006d60:	429e      	cmp	r6, r3
 8006d62:	dc14      	bgt.n	8006d8e <atan+0x76>
 8006d64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d68:	429e      	cmp	r6, r3
 8006d6a:	dc0d      	bgt.n	8006d88 <atan+0x70>
 8006d6c:	a396      	add	r3, pc, #600	; (adr r3, 8006fc8 <atan+0x2b0>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	ee10 0a10 	vmov	r0, s0
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7f9 fa34 	bl	80001e4 <__adddf3>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4baf      	ldr	r3, [pc, #700]	; (800703c <atan+0x324>)
 8006d80:	f7f9 fe76 	bl	8000a70 <__aeabi_dcmpgt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d1e6      	bne.n	8006d56 <atan+0x3e>
 8006d88:	f04f 3aff 	mov.w	sl, #4294967295
 8006d8c:	e02b      	b.n	8006de6 <atan+0xce>
 8006d8e:	f000 f963 	bl	8007058 <fabs>
 8006d92:	4bab      	ldr	r3, [pc, #684]	; (8007040 <atan+0x328>)
 8006d94:	429e      	cmp	r6, r3
 8006d96:	ec55 4b10 	vmov	r4, r5, d0
 8006d9a:	f300 80bf 	bgt.w	8006f1c <atan+0x204>
 8006d9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006da2:	429e      	cmp	r6, r3
 8006da4:	f300 80a0 	bgt.w	8006ee8 <atan+0x1d0>
 8006da8:	ee10 2a10 	vmov	r2, s0
 8006dac:	ee10 0a10 	vmov	r0, s0
 8006db0:	462b      	mov	r3, r5
 8006db2:	4629      	mov	r1, r5
 8006db4:	f7f9 fa16 	bl	80001e4 <__adddf3>
 8006db8:	2200      	movs	r2, #0
 8006dba:	4ba0      	ldr	r3, [pc, #640]	; (800703c <atan+0x324>)
 8006dbc:	f7f9 fa10 	bl	80001e0 <__aeabi_dsub>
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dca:	4620      	mov	r0, r4
 8006dcc:	4629      	mov	r1, r5
 8006dce:	f7f9 fa09 	bl	80001e4 <__adddf3>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	4639      	mov	r1, r7
 8006dda:	f7f9 fce3 	bl	80007a4 <__aeabi_ddiv>
 8006dde:	f04f 0a00 	mov.w	sl, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	460d      	mov	r5, r1
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	4620      	mov	r0, r4
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7f9 fbaf 	bl	8000550 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4680      	mov	r8, r0
 8006df8:	4689      	mov	r9, r1
 8006dfa:	f7f9 fba9 	bl	8000550 <__aeabi_dmul>
 8006dfe:	a374      	add	r3, pc, #464	; (adr r3, 8006fd0 <atan+0x2b8>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	f7f9 fba2 	bl	8000550 <__aeabi_dmul>
 8006e0c:	a372      	add	r3, pc, #456	; (adr r3, 8006fd8 <atan+0x2c0>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f7f9 f9e7 	bl	80001e4 <__adddf3>
 8006e16:	4632      	mov	r2, r6
 8006e18:	463b      	mov	r3, r7
 8006e1a:	f7f9 fb99 	bl	8000550 <__aeabi_dmul>
 8006e1e:	a370      	add	r3, pc, #448	; (adr r3, 8006fe0 <atan+0x2c8>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 f9de 	bl	80001e4 <__adddf3>
 8006e28:	4632      	mov	r2, r6
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	f7f9 fb90 	bl	8000550 <__aeabi_dmul>
 8006e30:	a36d      	add	r3, pc, #436	; (adr r3, 8006fe8 <atan+0x2d0>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 f9d5 	bl	80001e4 <__adddf3>
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	f7f9 fb87 	bl	8000550 <__aeabi_dmul>
 8006e42:	a36b      	add	r3, pc, #428	; (adr r3, 8006ff0 <atan+0x2d8>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f7f9 f9cc 	bl	80001e4 <__adddf3>
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	463b      	mov	r3, r7
 8006e50:	f7f9 fb7e 	bl	8000550 <__aeabi_dmul>
 8006e54:	a368      	add	r3, pc, #416	; (adr r3, 8006ff8 <atan+0x2e0>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f7f9 f9c3 	bl	80001e4 <__adddf3>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	464b      	mov	r3, r9
 8006e62:	f7f9 fb75 	bl	8000550 <__aeabi_dmul>
 8006e66:	a366      	add	r3, pc, #408	; (adr r3, 8007000 <atan+0x2e8>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	4689      	mov	r9, r1
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 fb6c 	bl	8000550 <__aeabi_dmul>
 8006e78:	a363      	add	r3, pc, #396	; (adr r3, 8007008 <atan+0x2f0>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 f9af 	bl	80001e0 <__aeabi_dsub>
 8006e82:	4632      	mov	r2, r6
 8006e84:	463b      	mov	r3, r7
 8006e86:	f7f9 fb63 	bl	8000550 <__aeabi_dmul>
 8006e8a:	a361      	add	r3, pc, #388	; (adr r3, 8007010 <atan+0x2f8>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 f9a6 	bl	80001e0 <__aeabi_dsub>
 8006e94:	4632      	mov	r2, r6
 8006e96:	463b      	mov	r3, r7
 8006e98:	f7f9 fb5a 	bl	8000550 <__aeabi_dmul>
 8006e9c:	a35e      	add	r3, pc, #376	; (adr r3, 8007018 <atan+0x300>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7f9 f99d 	bl	80001e0 <__aeabi_dsub>
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	f7f9 fb51 	bl	8000550 <__aeabi_dmul>
 8006eae:	a35c      	add	r3, pc, #368	; (adr r3, 8007020 <atan+0x308>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 f994 	bl	80001e0 <__aeabi_dsub>
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	f7f9 fb48 	bl	8000550 <__aeabi_dmul>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 f98c 	bl	80001e4 <__adddf3>
 8006ecc:	4622      	mov	r2, r4
 8006ece:	462b      	mov	r3, r5
 8006ed0:	f7f9 fb3e 	bl	8000550 <__aeabi_dmul>
 8006ed4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	d14b      	bne.n	8006f76 <atan+0x25e>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 f97d 	bl	80001e0 <__aeabi_dsub>
 8006ee6:	e72c      	b.n	8006d42 <atan+0x2a>
 8006ee8:	ee10 0a10 	vmov	r0, s0
 8006eec:	2200      	movs	r2, #0
 8006eee:	4b53      	ldr	r3, [pc, #332]	; (800703c <atan+0x324>)
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 f975 	bl	80001e0 <__aeabi_dsub>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4606      	mov	r6, r0
 8006efa:	460f      	mov	r7, r1
 8006efc:	4b4f      	ldr	r3, [pc, #316]	; (800703c <atan+0x324>)
 8006efe:	4620      	mov	r0, r4
 8006f00:	4629      	mov	r1, r5
 8006f02:	f7f9 f96f 	bl	80001e4 <__adddf3>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	f7f9 fc49 	bl	80007a4 <__aeabi_ddiv>
 8006f12:	f04f 0a01 	mov.w	sl, #1
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	e764      	b.n	8006de6 <atan+0xce>
 8006f1c:	4b49      	ldr	r3, [pc, #292]	; (8007044 <atan+0x32c>)
 8006f1e:	429e      	cmp	r6, r3
 8006f20:	dc1d      	bgt.n	8006f5e <atan+0x246>
 8006f22:	ee10 0a10 	vmov	r0, s0
 8006f26:	2200      	movs	r2, #0
 8006f28:	4b47      	ldr	r3, [pc, #284]	; (8007048 <atan+0x330>)
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7f9 f958 	bl	80001e0 <__aeabi_dsub>
 8006f30:	2200      	movs	r2, #0
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	4b44      	ldr	r3, [pc, #272]	; (8007048 <atan+0x330>)
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 fb08 	bl	8000550 <__aeabi_dmul>
 8006f40:	2200      	movs	r2, #0
 8006f42:	4b3e      	ldr	r3, [pc, #248]	; (800703c <atan+0x324>)
 8006f44:	f7f9 f94e 	bl	80001e4 <__adddf3>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 fc28 	bl	80007a4 <__aeabi_ddiv>
 8006f54:	f04f 0a02 	mov.w	sl, #2
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	e743      	b.n	8006de6 <atan+0xce>
 8006f5e:	462b      	mov	r3, r5
 8006f60:	ee10 2a10 	vmov	r2, s0
 8006f64:	2000      	movs	r0, #0
 8006f66:	4939      	ldr	r1, [pc, #228]	; (800704c <atan+0x334>)
 8006f68:	f7f9 fc1c 	bl	80007a4 <__aeabi_ddiv>
 8006f6c:	f04f 0a03 	mov.w	sl, #3
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	e737      	b.n	8006de6 <atan+0xce>
 8006f76:	4b36      	ldr	r3, [pc, #216]	; (8007050 <atan+0x338>)
 8006f78:	4e36      	ldr	r6, [pc, #216]	; (8007054 <atan+0x33c>)
 8006f7a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006f7e:	4456      	add	r6, sl
 8006f80:	449a      	add	sl, r3
 8006f82:	e9da 2300 	ldrd	r2, r3, [sl]
 8006f86:	f7f9 f92b 	bl	80001e0 <__aeabi_dsub>
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	f7f9 f927 	bl	80001e0 <__aeabi_dsub>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006f9a:	f7f9 f921 	bl	80001e0 <__aeabi_dsub>
 8006f9e:	f1bb 0f00 	cmp.w	fp, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	f6bf aed6 	bge.w	8006d56 <atan+0x3e>
 8006faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fae:	461d      	mov	r5, r3
 8006fb0:	e6d1      	b.n	8006d56 <atan+0x3e>
 8006fb2:	a51d      	add	r5, pc, #116	; (adr r5, 8007028 <atan+0x310>)
 8006fb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fb8:	e6cd      	b.n	8006d56 <atan+0x3e>
 8006fba:	bf00      	nop
 8006fbc:	f3af 8000 	nop.w
 8006fc0:	54442d18 	.word	0x54442d18
 8006fc4:	3ff921fb 	.word	0x3ff921fb
 8006fc8:	8800759c 	.word	0x8800759c
 8006fcc:	7e37e43c 	.word	0x7e37e43c
 8006fd0:	e322da11 	.word	0xe322da11
 8006fd4:	3f90ad3a 	.word	0x3f90ad3a
 8006fd8:	24760deb 	.word	0x24760deb
 8006fdc:	3fa97b4b 	.word	0x3fa97b4b
 8006fe0:	a0d03d51 	.word	0xa0d03d51
 8006fe4:	3fb10d66 	.word	0x3fb10d66
 8006fe8:	c54c206e 	.word	0xc54c206e
 8006fec:	3fb745cd 	.word	0x3fb745cd
 8006ff0:	920083ff 	.word	0x920083ff
 8006ff4:	3fc24924 	.word	0x3fc24924
 8006ff8:	5555550d 	.word	0x5555550d
 8006ffc:	3fd55555 	.word	0x3fd55555
 8007000:	2c6a6c2f 	.word	0x2c6a6c2f
 8007004:	bfa2b444 	.word	0xbfa2b444
 8007008:	52defd9a 	.word	0x52defd9a
 800700c:	3fadde2d 	.word	0x3fadde2d
 8007010:	af749a6d 	.word	0xaf749a6d
 8007014:	3fb3b0f2 	.word	0x3fb3b0f2
 8007018:	fe231671 	.word	0xfe231671
 800701c:	3fbc71c6 	.word	0x3fbc71c6
 8007020:	9998ebc4 	.word	0x9998ebc4
 8007024:	3fc99999 	.word	0x3fc99999
 8007028:	54442d18 	.word	0x54442d18
 800702c:	bff921fb 	.word	0xbff921fb
 8007030:	440fffff 	.word	0x440fffff
 8007034:	7ff00000 	.word	0x7ff00000
 8007038:	3fdbffff 	.word	0x3fdbffff
 800703c:	3ff00000 	.word	0x3ff00000
 8007040:	3ff2ffff 	.word	0x3ff2ffff
 8007044:	40037fff 	.word	0x40037fff
 8007048:	3ff80000 	.word	0x3ff80000
 800704c:	bff00000 	.word	0xbff00000
 8007050:	080070c8 	.word	0x080070c8
 8007054:	080070a8 	.word	0x080070a8

08007058 <fabs>:
 8007058:	ec51 0b10 	vmov	r0, r1, d0
 800705c:	ee10 2a10 	vmov	r2, s0
 8007060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007064:	ec43 2b10 	vmov	d0, r2, r3
 8007068:	4770      	bx	lr
	...

0800706c <_init>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr

08007078 <_fini>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr
